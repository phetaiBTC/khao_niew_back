{
    "sourceFile": "src/common/transaction/transaction.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1755956213527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755956231190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,5 +21,27 @@\n   //   } finally {\r\n   //     await queryRunner.release();\r\n   //   }\r\n   // }\r\n+  async runInTransaction<T>(\r\n+  dataSource: DataSource,\r\n+  operations: (manager: EntityManager) => Promise<T>,\r\n+  options?: {\r\n+    isolationLevel?: string;\r\n+    timeout?: number;\r\n+  },\r\n+): Promise<T> {\r\n+  const queryRunner = dataSource.createQueryRunner();\r\n+  await queryRunner.connect();\r\n+  await queryRunner.startTransaction(options?.isolationLevel);\r\n+  try {\r\n+    const result = await operations(queryRunner.manager);\r\n+    await queryRunner.commitTransaction();\r\n+    return result;\r\n+  } catch (error) {\r\n+    await queryRunner.rollbackTransaction();\r\n+    throw error;\r\n+  } finally {\r\n+    await queryRunner.release();\r\n+  }\r\n }\r\n+}\r\n"
                },
                {
                    "date": 1755956264475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   },\r\n ): Promise<T> {\r\n   const queryRunner = dataSource.createQueryRunner();\r\n   await queryRunner.connect();\r\n-  await queryRunner.startTransaction(options?.isolationLevel);\r\n+  await queryRunner.startTransaction(options?.isolationLevel as IsolationLevel | undefined);\r\n   try {\r\n     const result = await operations(queryRunner.manager);\r\n     await queryRunner.commitTransaction();\r\n     return result;\r\n"
                },
                {
                    "date": 1755956270289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { Injectable } from '@nestjs/common';\r\n import { DataSource, EntityManager } from 'typeorm';\r\n import { ITransactionManager } from './transaction.interface';\r\n+import { IsolationLevel } from 'typeorm/driver/types/IsolationLevel.js';\r\n \r\n @Injectable()\r\n export class TransactionManagerService implements ITransactionManager {\r\n   // async runInTransaction<T>(\r\n"
                },
                {
                    "date": 1755957502813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,27 +22,27 @@\n   //   } finally {\r\n   //     await queryRunner.release();\r\n   //   }\r\n   // }\r\n-  async runInTransaction<T>(\r\n-  dataSource: DataSource,\r\n-  operations: (manager: EntityManager) => Promise<T>,\r\n-  options?: {\r\n-    isolationLevel?: string;\r\n-    timeout?: number;\r\n-  },\r\n-): Promise<T> {\r\n-  const queryRunner = dataSource.createQueryRunner();\r\n-  await queryRunner.connect();\r\n-  await queryRunner.startTransaction(options?.isolationLevel as IsolationLevel | undefined);\r\n-  try {\r\n-    const result = await operations(queryRunner.manager);\r\n-    await queryRunner.commitTransaction();\r\n-    return result;\r\n-  } catch (error) {\r\n-    await queryRunner.rollbackTransaction();\r\n-    throw error;\r\n-  } finally {\r\n-    await queryRunner.release();\r\n-  }\r\n-}\r\n-}\r\n+//   async runInTransaction<T>(\r\n+//   dataSource: DataSource,\r\n+//   operations: (manager: EntityManager) => Promise<T>,\r\n+//   options?: {\r\n+//     isolationLevel?: string;\r\n+//     timeout?: number;\r\n+//   },\r\n+// ): Promise<T> {\r\n+//   const queryRunner = dataSource.createQueryRunner();\r\n+//   await queryRunner.connect();\r\n+//   await queryRunner.startTransaction(options?.isolationLevel as IsolationLevel | undefined);\r\n+//   try {\r\n+//     const result = await operations(queryRunner.manager);\r\n+//     await queryRunner.commitTransaction();\r\n+//     return result;\r\n+//   } catch (error) {\r\n+//     await queryRunner.rollbackTransaction();\r\n+//     throw error;\r\n+//   } finally {\r\n+//     await queryRunner.release();\r\n+//   }\r\n+// }\r\n+// }\r\n"
                },
                {
                    "date": 1755957508225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,26 +4,26 @@\n import { IsolationLevel } from 'typeorm/driver/types/IsolationLevel.js';\r\n \r\n @Injectable()\r\n export class TransactionManagerService implements ITransactionManager {\r\n-  // async runInTransaction<T>(\r\n-  //   dataSource: DataSource,\r\n-  //   operations: (manager: EntityManager) => Promise<T>,\r\n-  // ): Promise<T> {\r\n-  //   const queryRunner = dataSource.createQueryRunner();\r\n-  //   await queryRunner.connect();\r\n-  //   await queryRunner.startTransaction();\r\n-  //   try {\r\n-  //     const result = await operations(queryRunner.manager);\r\n-  //     await queryRunner.commitTransaction();\r\n-  //     return result;\r\n-  //   } catch (error) {\r\n-  //     await queryRunner.rollbackTransaction();\r\n-  //     throw error;\r\n-  //   } finally {\r\n-  //     await queryRunner.release();\r\n-  //   }\r\n-  // }\r\n+  async runInTransaction<T>(\r\n+    dataSource: DataSource,\r\n+    operations: (manager: EntityManager) => Promise<T>,\r\n+  ): Promise<T> {\r\n+    const queryRunner = dataSource.createQueryRunner();\r\n+    await queryRunner.connect();\r\n+    await queryRunner.startTransaction();\r\n+    try {\r\n+      const result = await operations(queryRunner.manager);\r\n+      await queryRunner.commitTransaction();\r\n+      return result;\r\n+    } catch (error) {\r\n+      await queryRunner.rollbackTransaction();\r\n+      throw error;\r\n+    } finally {\r\n+      await queryRunner.release();\r\n+    }\r\n+  }\r\n //   async runInTransaction<T>(\r\n //   dataSource: DataSource,\r\n //   operations: (manager: EntityManager) => Promise<T>,\r\n //   options?: {\r\n"
                },
                {
                    "date": 1755957513561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n       throw error;\r\n     } finally {\r\n       await queryRunner.release();\r\n     }\r\n-  }\r\n+  }}\r\n //   async runInTransaction<T>(\r\n //   dataSource: DataSource,\r\n //   operations: (manager: EntityManager) => Promise<T>,\r\n //   options?: {\r\n"
                }
            ],
            "date": 1755956213527,
            "name": "Commit-0",
            "content": "import { Injectable } from '@nestjs/common';\r\nimport { DataSource, EntityManager } from 'typeorm';\r\nimport { ITransactionManager } from './transaction.interface';\r\n\r\n@Injectable()\r\nexport class TransactionManagerService implements ITransactionManager {\r\n  // async runInTransaction<T>(\r\n  //   dataSource: DataSource,\r\n  //   operations: (manager: EntityManager) => Promise<T>,\r\n  // ): Promise<T> {\r\n  //   const queryRunner = dataSource.createQueryRunner();\r\n  //   await queryRunner.connect();\r\n  //   await queryRunner.startTransaction();\r\n  //   try {\r\n  //     const result = await operations(queryRunner.manager);\r\n  //     await queryRunner.commitTransaction();\r\n  //     return result;\r\n  //   } catch (error) {\r\n  //     await queryRunner.rollbackTransaction();\r\n  //     throw error;\r\n  //   } finally {\r\n  //     await queryRunner.release();\r\n  //   }\r\n  // }\r\n}\r\n"
        }
    ]
}