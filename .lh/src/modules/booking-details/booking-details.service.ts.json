{
    "sourceFile": "src/modules/booking-details/booking-details.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1756273669304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756273676087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,101 @@\n-import { Injectable } from '@nestjs/common';\r\n+import { Injectable, NotFoundException } from '@nestjs/common';\r\n \r\n @Injectable()\r\n export class BookingDetailsService {\r\n \r\n+    constructor() {}\r\n+\r\n+\r\n+      async validateQrCode(ticketCode: string) {\r\n+        try {\r\n+          console.log('Searching for ticket code:', ticketCode);\r\n+          \r\n+          // Find the booking detail by ticket code\r\n+          const bookingDetail = await this.bookingDetailRepository.findOne({\r\n+            where: { ticket_code: ticketCode },\r\n+            relations: ['booking', 'booking.user', 'booking.concert', 'booking.payment']\r\n+          });\r\n     \r\n+          if (!bookingDetail) {\r\n+            console.log('Booking detail not found for ticket code:', ticketCode);\r\n+            throw new NotFoundException('Invalid ticket code - booking detail not found');\r\n+          }\r\n+    \r\n+          console.log('Found booking detail:', {\r\n+            id: bookingDetail.id,\r\n+            ticketCode: bookingDetail.ticket_code,\r\n+            bookingId: bookingDetail.booking?.id\r\n+          });\r\n+    \r\n+          try {\r\n+            // Extract ticket information from the ticket code\r\n+            const [bookingId, ticketNumber] = ticketCode.split('-').map(Number);\r\n+            \r\n+            if (!bookingId || !ticketNumber) {\r\n+              throw new Error('Invalid ticket code format');\r\n+            }\r\n+    \r\n+            // Create QR code data object based on the booking details\r\n+            const qrCodeData = {\r\n+              bookingId: bookingDetail.booking.id,\r\n+              ticketCode: bookingDetail.ticket_code,\r\n+              concertId: bookingDetail.booking.concert.id,\r\n+              ticketNumber: ticketNumber,\r\n+              totalTickets: bookingDetail.booking.ticket_quantity,\r\n+              concertDate: bookingDetail.booking.concert.date,\r\n+              userId: bookingDetail.booking.user.id,\r\n+              bookingDate: bookingDetail.booking.booking_date,\r\n+            };\r\n+            \r\n+            console.log('Generated QR data:', qrCodeData);\r\n+    \r\n+            // Generate verification hash\r\n+            const calculatedHash = crypto\r\n+              .createHash('sha256')\r\n+              .update(`${ticketCode}-${bookingDetail.booking.id}-${bookingDetail.booking.concert.id}`)\r\n+              .digest('hex');\r\n+            \r\n+            // Add hash to QR code data\r\n+            qrCodeData['hash'] = calculatedHash;\r\n+            \r\n+            console.log('Verification hash:', calculatedHash);\r\n+    \r\n+            // Return ticket information\r\n+            return {\r\n+              ticketDetail: {\r\n+                ticketCode: bookingDetail.ticket_code,\r\n+                ticketNumber: qrCodeData.ticketNumber,\r\n+                totalTickets: qrCodeData.totalTickets,\r\n+              },\r\n+              booking: {\r\n+                id: bookingDetail.booking.id,\r\n+                bookingDate: bookingDetail.booking.booking_date,\r\n+                totalAmount: bookingDetail.booking.total_amount,\r\n+              },\r\n+              concert: {\r\n+                id: bookingDetail.booking.concert.id,\r\n+                date: qrCodeData.concertDate,\r\n+              },\r\n+              user: {\r\n+                id: bookingDetail.booking.user.id,\r\n+              },\r\n+              payment: {\r\n+                id: bookingDetail.booking.payment.id,\r\n+                status: bookingDetail.booking.payment.status,\r\n+              },\r\n+              qrCodeData: qrCodeData, // Include raw QR data for debugging\r\n+              isValid: true\r\n+            };\r\n+          } catch (parseError) {\r\n+            console.error('Error parsing QR code data:', parseError);\r\n+            throw new NotFoundException(`Error parsing QR code: ${parseError.message}`);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error in validateQrCode:', error);\r\n+          if (error instanceof NotFoundException) {\r\n+            throw error;\r\n+          }\r\n+          throw new NotFoundException(`Invalid QR code format: ${error.message}`);\r\n+        }\r\n+      }\r\n }\r\n"
                },
                {
                    "date": 1756273709196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,11 @@\n \r\n @Injectable()\r\n export class BookingDetailsService {\r\n \r\n-    constructor() {}\r\n+    constr\r\n+uctor() {}\r\n \r\n-\r\n       async validateQrCode(ticketCode: string) {\r\n         try {\r\n           console.log('Searching for ticket code:', ticketCode);\r\n           \r\n"
                },
                {
                    "date": 1756273715367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,21 @@\n import { Injectable, NotFoundException } from '@nestjs/common';\r\n+import { InjectDataSource } from '@nestjs/typeorm';\r\n \r\n @Injectable()\r\n export class BookingDetailsService {\r\n \r\n-    constr\r\n-uctor() {}\r\n-\r\n+      constructor(\r\n+        @InjectDataSource() private readonly dataSource: DataSource,\r\n+        @Inject(TRANSACTION_MANAGER_SERVICE)\r\n+        private readonly transactionManagerService: ITransactionManager,\r\n+        @InjectRepository(Booking)\r\n+        private readonly bookingRepository: Repository<Booking>,\r\n+        @InjectRepository(Concert)\r\n+        private readonly concertRepository: Repository<Concert>,\r\n+        @InjectRepository(BookingDetail)\r\n+        private readonly bookingDetailRepository: Repository<BookingDetail>,\r\n+      ) {}\r\n       async validateQrCode(ticketCode: string) {\r\n         try {\r\n           console.log('Searching for ticket code:', ticketCode);\r\n           \r\n"
                },
                {
                    "date": 1756273721980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { Injectable, NotFoundException } from '@nestjs/common';\r\n import { InjectDataSource } from '@nestjs/typeorm';\r\n+import { DataSource } from 'typeorm';\r\n \r\n @Injectable()\r\n export class BookingDetailsService {\r\n \r\n"
                },
                {
                    "date": 1756273738682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,14 @@\n import { Injectable, NotFoundException } from '@nestjs/common';\r\n import { InjectDataSource } from '@nestjs/typeorm';\r\n import { DataSource } from 'typeorm';\r\n+import { Booking } from '../booking/entities/booking.entity';\r\n \r\n @Injectable()\r\n export class BookingDetailsService {\r\n \r\n       constructor(\r\n         @InjectDataSource() private readonly dataSource: DataSource,\r\n-        @Inject(TRANSACTION_MANAGER_SERVICE)\r\n-        private readonly transactionManagerService: ITransactionManager,\r\n         @InjectRepository(Booking)\r\n         private readonly bookingRepository: Repository<Booking>,\r\n         @InjectRepository(Concert)\r\n         private readonly concertRepository: Repository<Concert>,\r\n"
                },
                {
                    "date": 1756273747906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { Injectable, NotFoundException } from '@nestjs/common';\r\n-import { InjectDataSource } from '@nestjs/typeorm';\r\n+import { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\n import { DataSource } from 'typeorm';\r\n import { Booking } from '../booking/entities/booking.entity';\r\n+import { Concert } from '../concerts/entities/concert.entity';\r\n \r\n @Injectable()\r\n export class BookingDetailsService {\r\n \r\n"
                },
                {
                    "date": 1756273755559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n import { Injectable, NotFoundException } from '@nestjs/common';\r\n import { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\n-import { DataSource } from 'typeorm';\r\n+import { DataSource, Repository } from 'typeorm';\r\n import { Booking } from '../booking/entities/booking.entity';\r\n import { Concert } from '../concerts/entities/concert.entity';\r\n+import { BookingDetail } from './entities/bookingDetails.entity';\r\n \r\n @Injectable()\r\n export class BookingDetailsService {\r\n \r\n"
                },
                {
                    "date": 1756273769670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n       constructor(\r\n         @InjectDataSource() private readonly dataSource: DataSource,\r\n         @InjectRepository(Booking)\r\n         private readonly bookingRepository: Repository<Booking>,\r\n-        @InjectRepository(Concert)\r\n-        private readonly concertRepository: Repository<Concert>,\r\n+        // @InjectRepository(Concert)\r\n+        // private readonly concertRepository: Repository<Concert>,\r\n         @InjectRepository(BookingDetail)\r\n         private readonly bookingDetailRepository: Repository<BookingDetail>,\r\n       ) {}\r\n       async validateQrCode(ticketCode: string) {\r\n"
                },
                {
                    "date": 1756273776857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { Injectable, NotFoundException } from '@nestjs/common';\r\n import { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\n import { DataSource, Repository } from 'typeorm';\r\n import { Booking } from '../booking/entities/booking.entity';\r\n-import { Concert } from '../concerts/entities/concert.entity';\r\n+// import { Concert } from '../concerts/entities/concert.entity';\r\n import { BookingDetail } from './entities/bookingDetails.entity';\r\n \r\n @Injectable()\r\n export class BookingDetailsService {\r\n"
                },
                {
                    "date": 1756273878448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { DataSource, Repository } from 'typeorm';\r\n import { Booking } from '../booking/entities/booking.entity';\r\n // import { Concert } from '../concerts/entities/concert.entity';\r\n import { BookingDetail } from './entities/bookingDetails.entity';\r\n+import * as crypto from 'crypto';\r\n \r\n @Injectable()\r\n export class BookingDetailsService {\r\n \r\n"
                },
                {
                    "date": 1756274000472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,13 +9,8 @@\n @Injectable()\r\n export class BookingDetailsService {\r\n \r\n       constructor(\r\n-        @InjectDataSource() private readonly dataSource: DataSource,\r\n-        @InjectRepository(Booking)\r\n-        private readonly bookingRepository: Repository<Booking>,\r\n-        // @InjectRepository(Concert)\r\n-        // private readonly concertRepository: Repository<Concert>,\r\n         @InjectRepository(BookingDetail)\r\n         private readonly bookingDetailRepository: Repository<BookingDetail>,\r\n       ) {}\r\n       async validateQrCode(ticketCode: string) {\r\n"
                },
                {
                    "date": 1756274008091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { Injectable, NotFoundException } from '@nestjs/common';\r\n import { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\n import { DataSource, Repository } from 'typeorm';\r\n-import { Booking } from '../booking/entities/booking.entity';\r\n+\r\n // import { Concert } from '../concerts/entities/concert.entity';\r\n import { BookingDetail } from './entities/bookingDetails.entity';\r\n import * as crypto from 'crypto';\r\n \r\n"
                },
                {
                    "date": 1756274015218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,7 @@\n import { Injectable, NotFoundException } from '@nestjs/common';\r\n-import { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\n-import { DataSource, Repository } from 'typeorm';\r\n-\r\n-// import { Concert } from '../concerts/entities/concert.entity';\r\n+import { , InjectRepository } from '@nestjs/typeorm';\r\n+import { , Repository } from 'typeorm';\r\n import { BookingDetail } from './entities/bookingDetails.entity';\r\n import * as crypto from 'crypto';\r\n \r\n @Injectable()\r\n"
                },
                {
                    "date": 1756294531396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n import { Injectable, NotFoundException } from '@nestjs/common';\r\n-import { , InjectRepository } from '@nestjs/typeorm';\r\n-import { , Repository } from 'typeorm';\r\n+import {  InjectRepository } from '@nestjs/typeorm';\r\n+import {  Repository } from 'typeorm';\r\n import { BookingDetail } from './entities/bookingDetails.entity';\r\n import * as crypto from 'crypto';\r\n \r\n @Injectable()\r\n export class BookingDetailsService {\r\n \r\n       constructor(\r\n-        @InjectRepository(BookingDetail)\r\n+        @Repository(BookingDetail)\r\n         private readonly bookingDetailRepository: Repository<BookingDetail>,\r\n       ) {}\r\n       async validateQrCode(ticketCode: string) {\r\n         try {\r\n"
                },
                {
                    "date": 1756294538154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n @Injectable()\r\n export class BookingDetailsService {\r\n \r\n       constructor(\r\n-        @Repository(BookingDetail)\r\n+        @InjectRepository(BookingDetail)\r\n         private readonly bookingDetailRepository: Repository<BookingDetail>,\r\n       ) {}\r\n       async validateQrCode(ticketCode: string) {\r\n         try {\r\n"
                },
                {
                    "date": 1756301593270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,97 +10,97 @@\n       constructor(\r\n         @InjectRepository(BookingDetail)\r\n         private readonly bookingDetailRepository: Repository<BookingDetail>,\r\n       ) {}\r\n-      async validateQrCode(ticketCode: string) {\r\n-        try {\r\n-          console.log('Searching for ticket code:', ticketCode);\r\n+      // async validateQrCode(ticketCode: string) {\r\n+      //   try {\r\n+      //     console.log('Searching for ticket code:', ticketCode);\r\n           \r\n-          // Find the booking detail by ticket code\r\n-          const bookingDetail = await this.bookingDetailRepository.findOne({\r\n-            where: { ticket_code: ticketCode },\r\n-            relations: ['booking', 'booking.user', 'booking.concert', 'booking.payment']\r\n-          });\r\n+      //     // Find the booking detail by ticket code\r\n+      //     const bookingDetail = await this.bookingDetailRepository.findOne({\r\n+      //       where: { ticket_code: ticketCode },\r\n+      //       relations: ['booking', 'booking.user', 'booking.concert', 'booking.payment']\r\n+      //     });\r\n     \r\n-          if (!bookingDetail) {\r\n-            console.log('Booking detail not found for ticket code:', ticketCode);\r\n-            throw new NotFoundException('Invalid ticket code - booking detail not found');\r\n-          }\r\n+      //     if (!bookingDetail) {\r\n+      //       console.log('Booking detail not found for ticket code:', ticketCode);\r\n+      //       throw new NotFoundException('Invalid ticket code - booking detail not found');\r\n+      //     }\r\n     \r\n-          console.log('Found booking detail:', {\r\n-            id: bookingDetail.id,\r\n-            ticketCode: bookingDetail.ticket_code,\r\n-            bookingId: bookingDetail.booking?.id\r\n-          });\r\n+      //     console.log('Found booking detail:', {\r\n+      //       id: bookingDetail.id,\r\n+      //       ticketCode: bookingDetail.ticket_code,\r\n+      //       bookingId: bookingDetail.booking?.id\r\n+      //     });\r\n     \r\n-          try {\r\n-            // Extract ticket information from the ticket code\r\n-            const [bookingId, ticketNumber] = ticketCode.split('-').map(Number);\r\n+      //     try {\r\n+      //       // Extract ticket information from the ticket code\r\n+      //       const [bookingId, ticketNumber] = ticketCode.split('-').map(Number);\r\n             \r\n-            if (!bookingId || !ticketNumber) {\r\n-              throw new Error('Invalid ticket code format');\r\n-            }\r\n+      //       if (!bookingId || !ticketNumber) {\r\n+      //         throw new Error('Invalid ticket code format');\r\n+      //       }\r\n     \r\n-            // Create QR code data object based on the booking details\r\n-            const qrCodeData = {\r\n-              bookingId: bookingDetail.booking.id,\r\n-              ticketCode: bookingDetail.ticket_code,\r\n-              concertId: bookingDetail.booking.concert.id,\r\n-              ticketNumber: ticketNumber,\r\n-              totalTickets: bookingDetail.booking.ticket_quantity,\r\n-              concertDate: bookingDetail.booking.concert.date,\r\n-              userId: bookingDetail.booking.user.id,\r\n-              bookingDate: bookingDetail.booking.booking_date,\r\n-            };\r\n+      //       // Create QR code data object based on the booking details\r\n+      //       const qrCodeData = {\r\n+      //         bookingId: bookingDetail.booking.id,\r\n+      //         ticketCode: bookingDetail.ticket_code,\r\n+      //         concertId: bookingDetail.booking.concert.id,\r\n+      //         ticketNumber: ticketNumber,\r\n+      //         totalTickets: bookingDetail.booking.ticket_quantity,\r\n+      //         concertDate: bookingDetail.booking.concert.date,\r\n+      //         userId: bookingDetail.booking.user.id,\r\n+      //         bookingDate: bookingDetail.booking.booking_date,\r\n+      //       };\r\n             \r\n-            console.log('Generated QR data:', qrCodeData);\r\n+      //       console.log('Generated QR data:', qrCodeData);\r\n     \r\n-            // Generate verification hash\r\n-            const calculatedHash = crypto\r\n-              .createHash('sha256')\r\n-              .update(`${ticketCode}-${bookingDetail.booking.id}-${bookingDetail.booking.concert.id}`)\r\n-              .digest('hex');\r\n+      //       // Generate verification hash\r\n+      //       const calculatedHash = crypto\r\n+      //         .createHash('sha256')\r\n+      //         .update(`${ticketCode}-${bookingDetail.booking.id}-${bookingDetail.booking.concert.id}`)\r\n+      //         .digest('hex');\r\n             \r\n-            // Add hash to QR code data\r\n-            qrCodeData['hash'] = calculatedHash;\r\n+      //       // Add hash to QR code data\r\n+      //       qrCodeData['hash'] = calculatedHash;\r\n             \r\n-            console.log('Verification hash:', calculatedHash);\r\n+      //       console.log('Verification hash:', calculatedHash);\r\n     \r\n-            // Return ticket information\r\n-            return {\r\n-              ticketDetail: {\r\n-                ticketCode: bookingDetail.ticket_code,\r\n-                ticketNumber: qrCodeData.ticketNumber,\r\n-                totalTickets: qrCodeData.totalTickets,\r\n-              },\r\n-              booking: {\r\n-                id: bookingDetail.booking.id,\r\n-                bookingDate: bookingDetail.booking.booking_date,\r\n-                totalAmount: bookingDetail.booking.total_amount,\r\n-              },\r\n-              concert: {\r\n-                id: bookingDetail.booking.concert.id,\r\n-                date: qrCodeData.concertDate,\r\n-              },\r\n-              user: {\r\n-                id: bookingDetail.booking.user.id,\r\n-              },\r\n-              payment: {\r\n-                id: bookingDetail.booking.payment.id,\r\n-                status: bookingDetail.booking.payment.status,\r\n-              },\r\n-              qrCodeData: qrCodeData, // Include raw QR data for debugging\r\n-              isValid: true\r\n-            };\r\n-          } catch (parseError) {\r\n-            console.error('Error parsing QR code data:', parseError);\r\n-            throw new NotFoundException(`Error parsing QR code: ${parseError.message}`);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error in validateQrCode:', error);\r\n-          if (error instanceof NotFoundException) {\r\n-            throw error;\r\n-          }\r\n-          throw new NotFoundException(`Invalid QR code format: ${error.message}`);\r\n-        }\r\n-      }\r\n+      //       // Return ticket information\r\n+      //       return {\r\n+      //         ticketDetail: {\r\n+      //           ticketCode: bookingDetail.ticket_code,\r\n+      //           ticketNumber: qrCodeData.ticketNumber,\r\n+      //           totalTickets: qrCodeData.totalTickets,\r\n+      //         },\r\n+      //         booking: {\r\n+      //           id: bookingDetail.booking.id,\r\n+      //           bookingDate: bookingDetail.booking.booking_date,\r\n+      //           totalAmount: bookingDetail.booking.total_amount,\r\n+      //         },\r\n+      //         concert: {\r\n+      //           id: bookingDetail.booking.concert.id,\r\n+      //           date: qrCodeData.concertDate,\r\n+      //         },\r\n+      //         user: {\r\n+      //           id: bookingDetail.booking.user.id,\r\n+      //         },\r\n+      //         payment: {\r\n+      //           id: bookingDetail.booking.payment.id,\r\n+      //           status: bookingDetail.booking.payment.status,\r\n+      //         },\r\n+      //         qrCodeData: qrCodeData, // Include raw QR data for debugging\r\n+      //         isValid: true\r\n+      //       };\r\n+      //     } catch (parseError) {\r\n+      //       console.error('Error parsing QR code data:', parseError);\r\n+      //       throw new NotFoundException(`Error parsing QR code: ${parseError.message}`);\r\n+      //     }\r\n+      //   } catch (error) {\r\n+      //     console.error('Error in validateQrCode:', error);\r\n+      //     if (error instanceof NotFoundException) {\r\n+      //       throw error;\r\n+      //     }\r\n+      //     throw new NotFoundException(`Invalid QR code format: ${error.message}`);\r\n+      //   }\r\n+      // }\r\n }\r\n"
                },
                {
                    "date": 1756303951511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,97 +10,6 @@\n       constructor(\r\n         @InjectRepository(BookingDetail)\r\n         private readonly bookingDetailRepository: Repository<BookingDetail>,\r\n       ) {}\r\n-      // async validateQrCode(ticketCode: string) {\r\n-      //   try {\r\n-      //     console.log('Searching for ticket code:', ticketCode);\r\n-          \r\n-      //     // Find the booking detail by ticket code\r\n-      //     const bookingDetail = await this.bookingDetailRepository.findOne({\r\n-      //       where: { ticket_code: ticketCode },\r\n-      //       relations: ['booking', 'booking.user', 'booking.concert', 'booking.payment']\r\n-      //     });\r\n-    \r\n-      //     if (!bookingDetail) {\r\n-      //       console.log('Booking detail not found for ticket code:', ticketCode);\r\n-      //       throw new NotFoundException('Invalid ticket code - booking detail not found');\r\n-      //     }\r\n-    \r\n-      //     console.log('Found booking detail:', {\r\n-      //       id: bookingDetail.id,\r\n-      //       ticketCode: bookingDetail.ticket_code,\r\n-      //       bookingId: bookingDetail.booking?.id\r\n-      //     });\r\n-    \r\n-      //     try {\r\n-      //       // Extract ticket information from the ticket code\r\n-      //       const [bookingId, ticketNumber] = ticketCode.split('-').map(Number);\r\n-            \r\n-      //       if (!bookingId || !ticketNumber) {\r\n-      //         throw new Error('Invalid ticket code format');\r\n-      //       }\r\n-    \r\n-      //       // Create QR code data object based on the booking details\r\n-      //       const qrCodeData = {\r\n-      //         bookingId: bookingDetail.booking.id,\r\n-      //         ticketCode: bookingDetail.ticket_code,\r\n-      //         concertId: bookingDetail.booking.concert.id,\r\n-      //         ticketNumber: ticketNumber,\r\n-      //         totalTickets: bookingDetail.booking.ticket_quantity,\r\n-      //         concertDate: bookingDetail.booking.concert.date,\r\n-      //         userId: bookingDetail.booking.user.id,\r\n-      //         bookingDate: bookingDetail.booking.booking_date,\r\n-      //       };\r\n-            \r\n-      //       console.log('Generated QR data:', qrCodeData);\r\n-    \r\n-      //       // Generate verification hash\r\n-      //       const calculatedHash = crypto\r\n-      //         .createHash('sha256')\r\n-      //         .update(`${ticketCode}-${bookingDetail.booking.id}-${bookingDetail.booking.concert.id}`)\r\n-      //         .digest('hex');\r\n-            \r\n-      //       // Add hash to QR code data\r\n-      //       qrCodeData['hash'] = calculatedHash;\r\n-            \r\n-      //       console.log('Verification hash:', calculatedHash);\r\n-    \r\n-      //       // Return ticket information\r\n-      //       return {\r\n-      //         ticketDetail: {\r\n-      //           ticketCode: bookingDetail.ticket_code,\r\n-      //           ticketNumber: qrCodeData.ticketNumber,\r\n-      //           totalTickets: qrCodeData.totalTickets,\r\n-      //         },\r\n-      //         booking: {\r\n-      //           id: bookingDetail.booking.id,\r\n-      //           bookingDate: bookingDetail.booking.booking_date,\r\n-      //           totalAmount: bookingDetail.booking.total_amount,\r\n-      //         },\r\n-      //         concert: {\r\n-      //           id: bookingDetail.booking.concert.id,\r\n-      //           date: qrCodeData.concertDate,\r\n-      //         },\r\n-      //         user: {\r\n-      //           id: bookingDetail.booking.user.id,\r\n-      //         },\r\n-      //         payment: {\r\n-      //           id: bookingDetail.booking.payment.id,\r\n-      //           status: bookingDetail.booking.payment.status,\r\n-      //         },\r\n-      //         qrCodeData: qrCodeData, // Include raw QR data for debugging\r\n-      //         isValid: true\r\n-      //       };\r\n-      //     } catch (parseError) {\r\n-      //       console.error('Error parsing QR code data:', parseError);\r\n-      //       throw new NotFoundException(`Error parsing QR code: ${parseError.message}`);\r\n-      //     }\r\n-      //   } catch (error) {\r\n-      //     console.error('Error in validateQrCode:', error);\r\n-      //     if (error instanceof NotFoundException) {\r\n-      //       throw error;\r\n-      //     }\r\n-      //     throw new NotFoundException(`Invalid QR code format: ${error.message}`);\r\n-      //   }\r\n-      // }\r\n+   \r\n }\r\n"
                },
                {
                    "date": 1756303957836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,14 +2,23 @@\n import {  InjectRepository } from '@nestjs/typeorm';\r\n import {  Repository } from 'typeorm';\r\n import { BookingDetail } from './entities/bookingDetails.entity';\r\n import * as crypto from 'crypto';\r\n+import { PaginateDto } from 'src/common/dto/paginate.dto';\r\n \r\n @Injectable()\r\n export class BookingDetailsService {\r\n \r\n       constructor(\r\n         @InjectRepository(BookingDetail)\r\n         private readonly bookingDetailRepository: Repository<BookingDetail>,\r\n       ) {}\r\n-   \r\n+      async getBookingDetails(query : PaginateDto) {\r\n+        const qb = this.bookingDetailRepository.createQueryBuilder('bookingDetail');\r\n+        if (query.search) {\r\n+          qb.where('bookingDetail.bookingId = :search', {\r\n+            search: `%${query.search}%`,\r\n+          });\r\n+        }\r\n+        return paginateUtil(qb, query);\r\n+      }\r\n }\r\n"
                },
                {
                    "date": 1756303998133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import {  Repository } from 'typeorm';\r\n import { BookingDetail } from './entities/bookingDetails.entity';\r\n import * as crypto from 'crypto';\r\n import { PaginateDto } from 'src/common/dto/paginate.dto';\r\n+import { paginateUtil } from 'src/common/utils/paginate.util';\r\n \r\n @Injectable()\r\n export class BookingDetailsService {\r\n \r\n"
                },
                {
                    "date": 1756304102200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,14 +12,25 @@\n       constructor(\r\n         @InjectRepository(BookingDetail)\r\n         private readonly bookingDetailRepository: Repository<BookingDetail>,\r\n       ) {}\r\n-      async getBookingDetails(query : PaginateDto) {\r\n-        const qb = this.bookingDetailRepository.createQueryBuilder('bookingDetail');\r\n+      async getBookingDetails(query: PaginateDto) {\r\n+        const qb = this.bookingDetailRepository\r\n+          .createQueryBuilder('bookingDetail')\r\n+          .leftJoinAndSelect('bookingDetail.booking', 'booking')\r\n+          .leftJoinAndSelect('booking.concert', 'concert')\r\n+          .leftJoinAndSelect('booking.user', 'user')\r\n+          .leftJoinAndSelect('booking.payment', 'payment');\r\n+\r\n+        // Search by concert ID\r\n         if (query.search) {\r\n-          qb.where('bookingDetail.bookingId = :search', {\r\n-            search: `%${query.search}%`,\r\n+          qb.where('concert.id = :concertId', {\r\n+            concertId: query.search\r\n           });\r\n         }\r\n+\r\n+        // Add ordering by booking date desc\r\n+        qb.orderBy('booking.booking_date', 'DESC');\r\n+\r\n         return paginateUtil(qb, query);\r\n       }\r\n }\r\n"
                },
                {
                    "date": 1756304896230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,24 +13,35 @@\n         @InjectRepository(BookingDetail)\r\n         private readonly bookingDetailRepository: Repository<BookingDetail>,\r\n       ) {}\r\n       async getBookingDetails(query: PaginateDto) {\r\n-        const qb = this.bookingDetailRepository\r\n-          .createQueryBuilder('bookingDetail')\r\n-          .leftJoinAndSelect('bookingDetail.booking', 'booking')\r\n-          .leftJoinAndSelect('booking.concert', 'concert')\r\n-          .leftJoinAndSelect('booking.user', 'user')\r\n-          .leftJoinAndSelect('booking.payment', 'payment');\r\n+        try {\r\n+          console.log('Received query:', query); // Debug log\r\n \r\n-        // Search by concert ID\r\n-        if (query.search) {\r\n-          qb.where('concert.id = :concertId', {\r\n-            concertId: query.search\r\n-          });\r\n-        }\r\n+          const qb = this.bookingDetailRepository\r\n+            .createQueryBuilder('bookingDetail')\r\n+            .leftJoinAndSelect('bookingDetail.booking', 'booking')\r\n+            .leftJoinAndSelect('booking.concert', 'concert')\r\n+            .leftJoinAndSelect('booking.user', 'user')\r\n+            .leftJoinAndSelect('booking.payment', 'payment');\r\n \r\n-        // Add ordering by booking date desc\r\n-        qb.orderBy('booking.booking_date', 'DESC');\r\n+          // Search by concert ID if provided\r\n+          if (query.search) {\r\n+            console.log('Searching for concert ID:', query.search); // Debug log\r\n+            qb.andWhere('concert.id = :concertId', {\r\n+              concertId: parseInt(query.search, 10)\r\n+            });\r\n+          }\r\n \r\n-        return paginateUtil(qb, query);\r\n+          // Add ordering by booking date desc\r\n+          qb.orderBy('booking.booking_date', 'DESC');\r\n+\r\n+          // Debug log the generated query\r\n+          console.log('Generated SQL:', qb.getSql());\r\n+\r\n+          return await paginateUtil(qb, query);\r\n+        } catch (error) {\r\n+          console.error('Error in getBookingDetails service:', error);\r\n+          throw error;\r\n+        }\r\n       }\r\n }\r\n"
                },
                {
                    "date": 1756390045418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,46 @@\n import { Injectable, NotFoundException } from '@nestjs/common';\r\n-import {  InjectRepository } from '@nestjs/typeorm';\r\n-import {  Repository } from 'typeorm';\r\n+import { InjectRepository } from '@nestjs/typeorm';\r\n+import { Repository } from 'typeorm';\r\n import { BookingDetail } from './entities/bookingDetails.entity';\r\n import * as crypto from 'crypto';\r\n import { PaginateDto } from 'src/common/dto/paginate.dto';\r\n import { paginateUtil } from 'src/common/utils/paginate.util';\r\n \r\n @Injectable()\r\n export class BookingDetailsService {\r\n+  constructor(\r\n+    @InjectRepository(BookingDetail)\r\n+    private readonly bookingDetailRepository: Repository<BookingDetail>,\r\n+  ) {}\r\n+  async getBookingDetails(query: PaginateDto) {\r\n+    try {\r\n+      console.log('Received query:', query); // Debug log\r\n \r\n-      constructor(\r\n-        @InjectRepository(BookingDetail)\r\n-        private readonly bookingDetailRepository: Repository<BookingDetail>,\r\n-      ) {}\r\n-      async getBookingDetails(query: PaginateDto) {\r\n-        try {\r\n-          console.log('Received query:', query); // Debug log\r\n+      const qb = this.bookingDetailRepository\r\n+        .createQueryBuilder('bookingDetail')\r\n+        .leftJoinAndSelect('bookingDetail.booking', 'booking')\r\n+        .leftJoinAndSelect('booking.concert', 'concert')\r\n+        .leftJoinAndSelect('booking.user', 'user')\r\n+        .leftJoinAndSelect('booking.payment', 'payment');\r\n \r\n-          const qb = this.bookingDetailRepository\r\n-            .createQueryBuilder('bookingDetail')\r\n-            .leftJoinAndSelect('bookingDetail.booking', 'booking')\r\n-            .leftJoinAndSelect('booking.concert', 'concert')\r\n-            .leftJoinAndSelect('booking.user', 'user')\r\n-            .leftJoinAndSelect('booking.payment', 'payment');\r\n+      // Search by concert ID if provided\r\n+      if (query.search) {\r\n+        console.log('Searching for concert ID:', query.search); // Debug log\r\n+        qb.andWhere('concert.id = :concertId', {\r\n+          concertId: parseInt(query.search, 10),\r\n+        });\r\n+      }\r\n \r\n-          // Search by concert ID if provided\r\n-          if (query.search) {\r\n-            console.log('Searching for concert ID:', query.search); // Debug log\r\n-            qb.andWhere('concert.id = :concertId', {\r\n-              concertId: parseInt(query.search, 10)\r\n-            });\r\n-          }\r\n+      // Add ordering by booking date desc\r\n+      qb.orderBy('booking.booking_date', 'DESC');\r\n \r\n-          // Add ordering by booking date desc\r\n-          qb.orderBy('booking.booking_date', 'DESC');\r\n+      // Debug log the generated query\r\n+      console.log('Generated SQL:', qb.getSql());\r\n \r\n-          // Debug log the generated query\r\n-          console.log('Generated SQL:', qb.getSql());\r\n-\r\n-          return await paginateUtil(qb, query);\r\n-        } catch (error) {\r\n-          console.error('Error in getBookingDetails service:', error);\r\n-          throw error;\r\n-        }\r\n-      }\r\n+      return await paginateUtil(qb, query);\r\n+    } catch (error) {\r\n+      console.error('Error in getBookingDetails service:', error);\r\n+      throw error;\r\n+    }\r\n+  }\r\n }\r\n"
                }
            ],
            "date": 1756273669304,
            "name": "Commit-0",
            "content": "import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class BookingDetailsService {\r\n\r\n    \r\n}\r\n"
        }
    ]
}