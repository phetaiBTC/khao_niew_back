{
    "sourceFile": "src/modules/booking/booking.service.ts.new",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756229020627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756229020627,
            "name": "Commit-0",
            "content": "import { Inject, Injectable, NotFoundException } from '@nestjs/common';\r\nimport { CreateBookingDto } from './dto/create-booking.dto';\r\nimport { UpdateBookingDto } from './dto/update-booking.dto';\r\nimport { Booking } from './entities/booking.entity';\r\nimport { Payment } from '../payment/entities/payment.entity';\r\nimport { Concert } from '../concerts/entities/concert.entity';\r\nimport { Repository, DataSource } from 'typeorm';\r\nimport { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\nimport { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\nimport type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\nimport { BookingDetail } from './entities/bookingDetails.entity';\r\nimport * as QRCode from 'qrcode';\r\n\r\n@Injectable()\r\nexport class BookingService {\r\n  constructor(\r\n    @InjectDataSource() private readonly dataSource: DataSource,\r\n    @Inject(TRANSACTION_MANAGER_SERVICE)\r\n    private readonly transactionManagerService: ITransactionManager,\r\n    @InjectRepository(Booking)\r\n    private readonly bookingRepository: Repository<Booking>,\r\n    @InjectRepository(Concert)\r\n    private readonly concertRepository: Repository<Concert>,\r\n    @InjectRepository(BookingDetail)\r\n    private readonly bookingDetailRepository: Repository<BookingDetail>,\r\n  ) {}\r\n\r\n  // ... other methods remain the same ...\r\n\r\n  async validateQrCode(ticketCode: string) {\r\n    try {\r\n      console.log('Searching for ticket code:', ticketCode);\r\n      \r\n      // Find the booking detail by ticket code\r\n      const bookingDetail = await this.bookingDetailRepository.findOne({\r\n        where: { ticket_code: ticketCode },\r\n        relations: ['booking', 'booking.user', 'booking.concert', 'booking.payment']\r\n      });\r\n\r\n      if (!bookingDetail) {\r\n        console.log('Booking detail not found for ticket code:', ticketCode);\r\n        throw new NotFoundException('Invalid ticket code - booking detail not found');\r\n      }\r\n\r\n      console.log('Found booking detail:', {\r\n        id: bookingDetail.id,\r\n        ticketCode: bookingDetail.ticket_code,\r\n        bookingId: bookingDetail.booking?.id\r\n      });\r\n\r\n      let qrCodeData;\r\n      try {\r\n        // Parse QR code data\r\n        const qrBase64 = bookingDetail.qr_code.split(',')[1];\r\n        console.log('QR Base64 data length:', qrBase64.length);\r\n        \r\n        const qrDataString = Buffer.from(qrBase64, 'base64').toString();\r\n        console.log('Decoded QR data string:', qrDataString);\r\n        \r\n        qrCodeData = JSON.parse(qrDataString);\r\n        console.log('Parsed QR data:', qrCodeData);\r\n\r\n      } catch (parseError) {\r\n        console.error('Error parsing QR code data:', parseError);\r\n        throw new NotFoundException(`Error parsing QR code: ${parseError.message}`);\r\n      }\r\n\r\n      // Return ticket information\r\n      return {\r\n        ticketDetail: {\r\n          ticketCode: bookingDetail.ticket_code,\r\n          ticketNumber: qrCodeData.ticketNumber,\r\n          totalTickets: qrCodeData.totalTickets,\r\n        },\r\n        booking: {\r\n          id: bookingDetail.booking.id,\r\n          bookingDate: bookingDetail.booking.booking_date,\r\n          totalAmount: bookingDetail.booking.total_amount,\r\n        },\r\n        concert: {\r\n          id: bookingDetail.booking.concert.id,\r\n          date: qrCodeData.concertDate,\r\n        },\r\n        user: {\r\n          id: bookingDetail.booking.user.id,\r\n        },\r\n        payment: {\r\n          id: bookingDetail.booking.payment.id,\r\n          status: bookingDetail.booking.payment.status,\r\n        },\r\n        qrCodeData: qrCodeData, // Include raw QR data for debugging\r\n        isValid: true\r\n      };\r\n    } catch (error) {\r\n      console.error('Error in validateQrCode:', error);\r\n      if (error instanceof NotFoundException) {\r\n        throw error;\r\n      }\r\n      throw new NotFoundException(`Invalid QR code format: ${error.message}`);\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}