{
    "sourceFile": "src/modules/concerts/concerts.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755930648217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755930648217,
            "name": "Commit-0",
            "content": "import {\r\n  BadRequestException,\r\n  Injectable,\r\n  NotFoundException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, In } from 'typeorm';\r\nimport { Concert } from './entities/concert.entity';\r\nimport { Venue } from '../venue/entities/venue.entity';\r\nimport { Entertainment } from '../entertainments/entities/entertainment.entity';\r\nimport { CreateConcertDto } from './dto/create-concert.dto';\r\nimport { UpdateConcertDto } from './dto/update-concert.dto';\r\nimport { timeToNumber } from 'src/common/utils/timeToNumber';\r\n\r\n@Injectable()\r\nexport class ConcertsService {\r\n  constructor(\r\n    @InjectRepository(Concert) private concertRepo: Repository<Concert>,\r\n    @InjectRepository(Venue) private venueRepo: Repository<Venue>,\r\n    @InjectRepository(Entertainment)\r\n    private entertainmentRepo: Repository<Entertainment>,\r\n  ) {}\r\n\r\n\r\n  async create(dto: CreateConcertDto) {\r\n    const venue = await this.venueRepo.findOne({ where: { id: dto.venueId } });\r\n    if (!venue) throw new NotFoundException('Venue not found');\r\n\r\n    if (dto.entertainmentIds?.length) {\r\n      const entertainments = await this.entertainmentRepo.findBy({\r\n        id: In(dto.entertainmentIds),\r\n      });\r\n      if (entertainments.length !== dto.entertainmentIds.length)\r\n        throw new NotFoundException('Entertainment not found');\r\n    }\r\n    const start = timeToNumber(dto.startTime);\r\n    const end = timeToNumber(dto.endTime);\r\n\r\n    if (start >= end) {\r\n      throw new BadRequestException(\r\n        'Start time should be earlier than end time',\r\n      );\r\n    }\r\n\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n\r\n    const concertDate = new Date(dto.date);\r\n    concertDate.setHours(0, 0, 0, 0);\r\n\r\n    if (concertDate < today) {\r\n      throw new BadRequestException('Date must be today or in the future');\r\n    }\r\n\r\n    const concert = this.concertRepo.create({\r\n      startTime: dto.startTime,\r\n      endTime: dto.endTime,\r\n      price: dto.price,\r\n      limit: dto.limit,\r\n      date: dto.date,\r\n      status: dto.status,\r\n      venue,\r\n    });\r\n\r\n    if (dto.entertainmentIds?.length) {\r\n      const entertainments = await this.entertainmentRepo.findBy({\r\n        id: In(dto.entertainmentIds),\r\n      });\r\n      concert.entertainments = entertainments;\r\n    }\r\n\r\n    return this.concertRepo.save(concert);\r\n  }\r\n\r\n  async findAll() {\r\n    return this.concertRepo.find({ relations: ['venue', 'entertainments'] });\r\n  }\r\n\r\n  async findOne(id: number) {\r\n    const concert = await this.concertRepo.findOne({\r\n      where: { id },\r\n      relations: ['venue', 'entertainments'],\r\n    });\r\n    if (!concert) throw new NotFoundException('Concert not found');\r\n    return concert;\r\n  }\r\n\r\n  async update(id: number, dto: UpdateConcertDto) {\r\n    const concert = await this.findOne(id);\r\n    if (!concert) throw new NotFoundException('Concert not found');\r\n\r\n    const start = timeToNumber(dto.startTime ?? '');\r\n    const end = timeToNumber(dto.endTime ?? '');\r\n    if (start >= end) {\r\n      throw new BadRequestException(\r\n        'Start time should be earlier than end time',\r\n      );\r\n    }\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n\r\n    const concertDate = new Date(dto.date ?? '');\r\n    concertDate.setHours(0, 0, 0, 0);\r\n\r\n    if (concertDate < today) {\r\n      throw new BadRequestException('Date must be today or in the future');\r\n    }\r\n\r\n    if (dto.startTime) concert.startTime = dto.startTime;\r\n    if (dto.endTime) concert.endTime = dto.endTime;\r\n    if (dto.price) concert.price = dto.price;\r\n    if (dto.limit) concert.limit = dto.limit;\r\n    if (dto.date) concert.date = dto.date;\r\n    if (dto.status) concert.status = dto.status;\r\n\r\n    if (dto.venueId) {\r\n      const venue = await this.venueRepo.findOne({\r\n        where: { id: dto.venueId },\r\n      });\r\n      if (!venue) throw new NotFoundException('Venue not found');\r\n      concert.venue = venue;\r\n    }\r\n\r\n    if (dto.entertainmentIds) {\r\n      const entertainments = await this.entertainmentRepo.findBy({\r\n        id: In(dto.entertainmentIds),\r\n      });\r\n      concert.entertainments = entertainments;\r\n    }\r\n\r\n    return this.concertRepo.save(concert);\r\n  }\r\n\r\n  async remove(id: number) {\r\n    const concert = await this.findOne(id);\r\n    return this.concertRepo.remove(concert);\r\n  }\r\n}\r\n"
        }
    ]
}