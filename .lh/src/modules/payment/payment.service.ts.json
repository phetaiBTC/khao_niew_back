{
    "sourceFile": "src/modules/payment/payment.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1757514165806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757514511933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Injectable, NotFoundException } from '@nestjs/common';\r\n+import { Inject, Injectable, NotFoundException } from '@nestjs/common';\r\n import { InjectRepository, InjectDataSource } from '@nestjs/typeorm';\r\n import { Repository, DataSource } from 'typeorm';\r\n import { Payment } from './entities/payment.entity';\r\n import { Booking } from '../booking/entities/booking.entity';\r\n"
                },
                {
                    "date": 1757515184549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     @Inject(TRANSACTION_MANAGER_SERVICE)\r\n     private readonly transactionManagerService: ITransactionManager,\r\n   ) {}\r\n \r\n-  async updateStatus(id: number, status: string) {\r\n+  async updateStatus(id: number, status: P) {\r\n     const payment = await this.paymentRepository.findOne({ where: { id } });\r\n     if (!payment) {\r\n       throw new NotFoundException(`Payment with ID ${id} not found`);\r\n     }\r\n"
                },
                {
                    "date": 1757515316293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { Inject, Injectable, NotFoundException } from '@nestjs/common';\r\n import { InjectRepository, InjectDataSource } from '@nestjs/typeorm';\r\n import { Repository, DataSource } from 'typeorm';\r\n-import { Payment } from './entities/payment.entity';\r\n+import { Payment, PaymentStatus } from './entities/payment.entity';\r\n import { Booking } from '../booking/entities/booking.entity';\r\n import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n import { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\n import type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n@@ -20,9 +20,9 @@\n     @Inject(TRANSACTION_MANAGER_SERVICE)\r\n     private readonly transactionManagerService: ITransactionManager,\r\n   ) {}\r\n \r\n-  async updateStatus(id: number, status: P) {\r\n+  async updateStatus(body) {\r\n     const payment = await this.paymentRepository.findOne({ where: { id } });\r\n     if (!payment) {\r\n       throw new NotFoundException(`Payment with ID ${id} not found`);\r\n     }\r\n"
                },
                {
                    "date": 1757515322758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     @Inject(TRANSACTION_MANAGER_SERVICE)\r\n     private readonly transactionManagerService: ITransactionManager,\r\n   ) {}\r\n \r\n-  async updateStatus(body) {\r\n+  async updateStatus(body : Update) {\r\n     const payment = await this.paymentRepository.findOne({ where: { id } });\r\n     if (!payment) {\r\n       throw new NotFoundException(`Payment with ID ${id} not found`);\r\n     }\r\n"
                },
                {
                    "date": 1757515328016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     @Inject(TRANSACTION_MANAGER_SERVICE)\r\n     private readonly transactionManagerService: ITransactionManager,\r\n   ) {}\r\n \r\n-  async updateStatus(body : Update) {\r\n+  async updateStatus(body : UpdatePaymentDto) {\r\n     const payment = await this.paymentRepository.findOne({ where: { id } });\r\n     if (!payment) {\r\n       throw new NotFoundException(`Payment with ID ${id} not found`);\r\n     }\r\n"
                },
                {
                    "date": 1757515333266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import { Booking } from '../booking/entities/booking.entity';\r\n import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n import { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\n import type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n+import { UpdatePaymentDto } from './dto/update-payment.dto';\r\n \r\n @Injectable()\r\n export class PaymentService {\r\n   constructor(\r\n@@ -21,9 +22,9 @@\n     private readonly transactionManagerService: ITransactionManager,\r\n   ) {}\r\n \r\n   async updateStatus(body : UpdatePaymentDto) {\r\n-    const payment = await this.paymentRepository.findOne({ where: { id } });\r\n+    const payment = await this.paymentRepository.findOne({ where: { id: body.id } });\r\n     if (!payment) {\r\n       throw new NotFoundException(`Payment with ID ${id} not found`);\r\n     }\r\n     await this.paymentRepository.update(id, { status });\r\n"
                },
                {
                    "date": 1757515340832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,12 +24,12 @@\n \r\n   async updateStatus(body : UpdatePaymentDto) {\r\n     const payment = await this.paymentRepository.findOne({ where: { id: body.id } });\r\n     if (!payment) {\r\n-      throw new NotFoundException(`Payment with ID ${id} not found`);\r\n+      throw new NotFoundException(`Payment with ID ${body.id} not found`);\r\n     }\r\n-    await this.paymentRepository.update(id, { status });\r\n-    return { message: `Payment status updated to ${status}` };\r\n+    await this.paymentRepository.update(body.id, { status: body.status });\r\n+    return { message: `Payment status updated to ${body.status}` };\r\n   }\r\n \r\n   async delete(id: number) {\r\n     return this.transactionManagerService.runInTransaction(\r\n"
                },
                {
                    "date": 1757515656226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     @Inject(TRANSACTION_MANAGER_SERVICE)\r\n     private readonly transactionManagerService: ITransactionManager,\r\n   ) {}\r\n \r\n-  async updateStatus(body : UpdatePaymentDto) {\r\n+  async updateStatus(idbody : UpdatePaymentDto) {\r\n     const payment = await this.paymentRepository.findOne({ where: { id: body.id } });\r\n     if (!payment) {\r\n       throw new NotFoundException(`Payment with ID ${body.id} not found`);\r\n     }\r\n"
                },
                {
                    "date": 1757515668271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,10 @@\n     @Inject(TRANSACTION_MANAGER_SERVICE)\r\n     private readonly transactionManagerService: ITransactionManager,\r\n   ) {}\r\n \r\n-  async updateStatus(idbody : UpdatePaymentDto) {\r\n-    const payment = await this.paymentRepository.findOne({ where: { id: body.id } });\r\n+  async updateStatus(id:number ,body : UpdatePaymentDto) {\r\n+    const payment = await this.paymentRepository.findOne({ where: { id } });\r\n     if (!payment) {\r\n       throw new NotFoundException(`Payment with ID ${body.id} not found`);\r\n     }\r\n     await this.paymentRepository.update(body.id, { status: body.status });\r\n"
                },
                {
                    "date": 1757515673307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,11 +24,11 @@\n \r\n   async updateStatus(id:number ,body : UpdatePaymentDto) {\r\n     const payment = await this.paymentRepository.findOne({ where: { id } });\r\n     if (!payment) {\r\n-      throw new NotFoundException(`Payment with ID ${body.id} not found`);\r\n+      throw new NotFoundException(`Payment with ID ${id} not found`);\r\n     }\r\n-    await this.paymentRepository.update(body.id, { status: body.status });\r\n+    await this.paymentRepository.update(id, { status: body.status });\r\n     return { message: `Payment status updated to ${body.status}` };\r\n   }\r\n \r\n   async delete(id: number) {\r\n"
                },
                {
                    "date": 1757515694610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     @Inject(TRANSACTION_MANAGER_SERVICE)\r\n     private readonly transactionManagerService: ITransactionManager,\r\n   ) {}\r\n \r\n-  async updateStatus(id:number ,body : UpdatePaymentDto) {\r\n+  async updateStatus(id: number, body: UpdatePaymentDto) {\r\n     const payment = await this.paymentRepository.findOne({ where: { id } });\r\n     if (!payment) {\r\n       throw new NotFoundException(`Payment with ID ${id} not found`);\r\n     }\r\n"
                },
                {
                    "date": 1757516533595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n     return { message: `Payment status updated to ${body.status}` };\r\n   }\r\n \r\n   async delete(id: number) {\r\n+    console.log('Starting deletion process for payment ID:', id);\r\n     return this.transactionManagerService.runInTransaction(\r\n       this.dataSource,\r\n       async (manager) => {\r\n         // Find payment with related booking\r\n"
                },
                {
                    "date": 1757516835527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,17 +52,19 @@\n         });\r\n \r\n         // Delete booking details for each booking\r\n         for (const booking of bookings) {\r\n-          if (Array.isArray(booking.details) && booking.details.length > 0) {\r\n-            await manager.remove(BookingDetail, booking.details);\r\n-          }\r\n-          await manager.remove(Booking, booking);\r\n-        }\r\n-\r\n-        // Finally, delete the payment\r\n-        await manager.remove(Payment, payment);\r\n-\r\n+         if (Array.isArray(booking.details) && booking.details.length > 0) {\r\n+    for (const detail of booking.details) {\r\n+      // Remove check_in linked to this detail\r\n+      const checkIn = await manager.findOne('CheckIn', { where: { booking_details: { id: detail.id } } });\r\n+      if (checkIn) {\r\n+        await manager.remove('CheckIn', checkIn);\r\n+      }\r\n+    }\r\n+    await manager.remove(BookingDetail, booking.details);\r\n+  }\r\n+  await manager.remove(Booking, booking);\r\n         return { message: `Payment with ID ${id} and all related data has been deleted` };\r\n       }\r\n     );\r\n   }\r\n"
                },
                {
                    "date": 1757516846813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,9 @@\n     }\r\n     await manager.remove(BookingDetail, booking.details);\r\n   }\r\n   await manager.remove(Booking, booking);\r\n+        }\r\n         return { message: `Payment with ID ${id} and all related data has been deleted` };\r\n       }\r\n     );\r\n   }\r\n"
                },
                {
                    "date": 1757516891311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,20 +52,17 @@\n         });\r\n \r\n         // Delete booking details for each booking\r\n         for (const booking of bookings) {\r\n-         if (Array.isArray(booking.details) && booking.details.length > 0) {\r\n-    for (const detail of booking.details) {\r\n-      // Remove check_in linked to this detail\r\n-      const checkIn = await manager.findOne('CheckIn', { where: { booking_details: { id: detail.id } } });\r\n-      if (checkIn) {\r\n-        await manager.remove('CheckIn', checkIn);\r\n-      }\r\n-    }\r\n-    await manager.remove(BookingDetail, booking.details);\r\n-  }\r\n-  await manager.remove(Booking, booking);\r\n+          if (Array.isArray(booking.details) && booking.details.length > 0) {\r\n+            await manager.remove(BookingDetail, booking.details);\r\n+          }\r\n+          await manager.remove(Booking, booking);\r\n         }\r\n+\r\n+        // Finally, delete the payment\r\n+        await manager.remove(Payment, payment);\r\n+\r\n         return { message: `Payment with ID ${id} and all related data has been deleted` };\r\n       }\r\n     );\r\n   }\r\n"
                },
                {
                    "date": 1757516950558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,14 +51,21 @@\n           relations: ['details'],\r\n         });\r\n \r\n         // Delete booking details for each booking\r\n-        for (const booking of bookings) {\r\n-          if (Array.isArray(booking.details) && booking.details.length > 0) {\r\n-            await manager.remove(BookingDetail, booking.details);\r\n-          }\r\n-          await manager.remove(Booking, booking);\r\n-        }\r\n+      for (const booking of bookings) {\r\n+  if (Array.isArray(booking.details) && booking.details.length > 0) {\r\n+    for (const detail of booking.details) {\r\n+      // Remove check_in linked to this detail\r\n+      const checkIn = await manager.findOne('CheckIn', { where: { booking_details: { id: detail.id } } });\r\n+      if (checkIn) {\r\n+        await manager.remove('CheckIn', checkIn);\r\n+      }\r\n+    }\r\n+    await manager.remove(BookingDetail, booking.details);\r\n+  }\r\n+  await manager.remove(Booking, booking);\r\n+}\r\n \r\n         // Finally, delete the payment\r\n         await manager.remove(Payment, payment);\r\n \r\n"
                },
                {
                    "date": 1757517370496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { Inject, Injectable, NotFoundException } from '@nestjs/common';\r\n import { InjectRepository, InjectDataSource } from '@nestjs/typeorm';\r\n import { Repository, DataSource } from 'typeorm';\r\n-import { Payment, PaymentStatus } from './entities/payment.entity';\r\n+import { Payment } from './entities/payment.entity';\r\n import { Booking } from '../booking/entities/booking.entity';\r\n import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n import { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\n import type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n"
                }
            ],
            "date": 1757514165806,
            "name": "Commit-0",
            "content": "import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository, InjectDataSource } from '@nestjs/typeorm';\r\nimport { Repository, DataSource } from 'typeorm';\r\nimport { Payment } from './entities/payment.entity';\r\nimport { Booking } from '../booking/entities/booking.entity';\r\nimport { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\nimport { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\nimport type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n\r\n@Injectable()\r\nexport class PaymentService {\r\n  constructor(\r\n    @InjectRepository(Payment)\r\n    private readonly paymentRepository: Repository<Payment>,\r\n    @InjectRepository(Booking)\r\n    private readonly bookingRepository: Repository<Booking>,\r\n    @InjectRepository(BookingDetail)\r\n    private readonly bookingDetailRepository: Repository<BookingDetail>,\r\n    @InjectDataSource() private readonly dataSource: DataSource,\r\n    @Inject(TRANSACTION_MANAGER_SERVICE)\r\n    private readonly transactionManagerService: ITransactionManager,\r\n  ) {}\r\n\r\n  async updateStatus(id: number, status: string) {\r\n    const payment = await this.paymentRepository.findOne({ where: { id } });\r\n    if (!payment) {\r\n      throw new NotFoundException(`Payment with ID ${id} not found`);\r\n    }\r\n    await this.paymentRepository.update(id, { status });\r\n    return { message: `Payment status updated to ${status}` };\r\n  }\r\n\r\n  async delete(id: number) {\r\n    return this.transactionManagerService.runInTransaction(\r\n      this.dataSource,\r\n      async (manager) => {\r\n        // Find payment with related booking\r\n        const payment = await manager.findOne(Payment, {\r\n          where: { id },\r\n          relations: ['booking'],\r\n        });\r\n        if (!payment) {\r\n          throw new NotFoundException(`Payment with ID ${id} not found`);\r\n        }\r\n\r\n        // Find bookings linked to this payment\r\n        const bookings = await manager.find(Booking, {\r\n          where: { payment: { id } },\r\n          relations: ['details'],\r\n        });\r\n\r\n        // Delete booking details for each booking\r\n        for (const booking of bookings) {\r\n          if (Array.isArray(booking.details) && booking.details.length > 0) {\r\n            await manager.remove(BookingDetail, booking.details);\r\n          }\r\n          await manager.remove(Booking, booking);\r\n        }\r\n\r\n        // Finally, delete the payment\r\n        await manager.remove(Payment, payment);\r\n\r\n        return { message: `Payment with ID ${id} and all related data has been deleted` };\r\n      }\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}