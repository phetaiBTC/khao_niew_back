{
    "sourceFile": "src/modules/check_in/check_in.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 59,
            "patches": [
                {
                    "date": 1756306346539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756306414778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n \r\n @Injectable()\r\n export class CheckInService {\r\n   create(createCheckInDto: CreateCheckInDto) {\r\n-    \r\n+      try\r\n+\r\n   }\r\n \r\n   findAll() {\r\n     return `This action returns all checkIn`;\r\n"
                },
                {
                    "date": 1756306422289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,14 @@\n \r\n @Injectable()\r\n export class CheckInService {\r\n   create(createCheckInDto: CreateCheckInDto) {\r\n-      try\r\n+      try {\r\n+        return `This action adds a new checkIn`;\r\n+      } catch (error) {\r\n+        console.log(error);\r\n+        throw error;\r\n+      }\r\n \r\n   }\r\n \r\n   findAll() {\r\n"
                },
                {
                    "date": 1756306428603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,10 @@\n @Injectable()\r\n export class CheckInService {\r\n   create(createCheckInDto: CreateCheckInDto) {\r\n       try {\r\n+       \r\n+\r\n         return `This action adds a new checkIn`;\r\n       } catch (error) {\r\n         console.log(error);\r\n         throw error;\r\n"
                },
                {
                    "date": 1756306481661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { Injectable } from '@nestjs/common';\r\n import { CreateCheckInDto } from './dto/create-check_in.dto';\r\n import { UpdateCheckInDto } from './dto/update-check_in.dto';\r\n-\r\n+import \r\n @Injectable()\r\n export class CheckInService {\r\n   create(createCheckInDto: CreateCheckInDto) {\r\n       try {\r\n"
                },
                {
                    "date": 1756306489398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,14 @@\n import { Injectable } from '@nestjs/common';\r\n import { CreateCheckInDto } from './dto/create-check_in.dto';\r\n import { UpdateCheckInDto } from './dto/update-check_in.dto';\r\n-import \r\n+import { InjectRepository } from '@nestjs/typeorm';\r\n+import { CheckIn } from './entities/check_in.entity';\r\n+import { Repository } from 'typeorm';\r\n+import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n @Injectable()\r\n export class CheckInService {\r\n+  \r\n   create(createCheckInDto: CreateCheckInDto) {\r\n       try {\r\n        \r\n \r\n"
                },
                {
                    "date": 1756306513793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,15 @@\n import { Repository } from 'typeorm';\r\n import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n @Injectable()\r\n export class CheckInService {\r\n-  \r\n-  create(createCheckInDto: CreateCheckInDto) {\r\n+  constructor(\r\n+    @InjectRepository(CheckIn)\r\n+    private checkInRepository: Repository<CheckIn>,\r\n+    @InjectRepository(BookingDetail)\r\n+    private bookingDetailRepository: Repository<BookingDetail>,\r\n+  ) {}\r\n+  async create(createCheckInDto: CreateCheckInDto) {\r\n       try {\r\n        \r\n \r\n         return `This action adds a new checkIn`;\r\n"
                },
                {
                    "date": 1756306521070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     private bookingDetailRepository: Repository<BookingDetail>,\r\n   ) {}\r\n   async create(createCheckInDto: CreateCheckInDto) {\r\n       try {\r\n-       \r\n+         const \r\n \r\n         return `This action adds a new checkIn`;\r\n       } catch (error) {\r\n         console.log(error);\r\n"
                },
                {
                    "date": 1756307729105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,12 @@\n import { InjectRepository } from '@nestjs/typeorm';\r\n import { CheckIn } from './entities/check_in.entity';\r\n import { Repository } from 'typeorm';\r\n import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n+import { Repository, DataSource } from 'typeorm';\r\n+import { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\n+import { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\n+import type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n @Injectable()\r\n export class CheckInService {\r\n   constructor(\r\n     @InjectRepository(CheckIn)\r\n@@ -14,10 +18,31 @@\n     private bookingDetailRepository: Repository<BookingDetail>,\r\n   ) {}\r\n   async create(createCheckInDto: CreateCheckInDto) {\r\n       try {\r\n-         const \r\n+         const bookingDetail = await this.bookingDetailRepository.findOne({\r\n+          where: { id: createCheckInDto.booking_details },\r\n+          relations: ['check_in'],\r\n+        });\r\n \r\n+        if (!bookingDetail) {\r\n+          throw new Error(`BookingDetail with id ${createCheckInDto.booking_details} not found`);\r\n+        }\r\n+\r\n+        if (bookingDetail.check_in) {\r\n+          throw new Error(`BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`);\r\n+        }\r\n+\r\n+        const checkIn = this.checkInRepository.create({\r\n+          booking_details: bookingDetail,\r\n+        });\r\n+\r\n+        await this.checkInRepository.save(checkIn);\r\n+\r\n+        // Update the status in BookingDetail\r\n+        bookingDetail.status = true;\r\n+        await this.bookingDetailRepository.save(bookingDetail);\r\n+\r\n         return `This action adds a new checkIn`;\r\n       } catch (error) {\r\n         console.log(error);\r\n         throw error;\r\n"
                },
                {
                    "date": 1756307741717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { Injectable } from '@nestjs/common';\r\n import { CreateCheckInDto } from './dto/create-check_in.dto';\r\n import { UpdateCheckInDto } from './dto/update-check_in.dto';\r\n-import { InjectRepository } from '@nestjs/typeorm';\r\n+import { InjectRepository ,InjectDataSource} from '@nestjs/typeorm';\r\n import { CheckIn } from './entities/check_in.entity';\r\n import { Repository } from 'typeorm';\r\n import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n import { Repository, DataSource } from 'typeorm';\r\n"
                },
                {
                    "date": 1756307751831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,11 @@\n import { CreateCheckInDto } from './dto/create-check_in.dto';\r\n import { UpdateCheckInDto } from './dto/update-check_in.dto';\r\n import { InjectRepository ,InjectDataSource} from '@nestjs/typeorm';\r\n import { CheckIn } from './entities/check_in.entity';\r\n-import { Repository } from 'typeorm';\r\n+import { Repository, Repository} from 'typeorm';\r\n import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n import { Repository, DataSource } from 'typeorm';\r\n-import { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\n import { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\n import type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n @Injectable()\r\n export class CheckInService {\r\n"
                },
                {
                    "date": 1756307770162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,16 +2,16 @@\n import { CreateCheckInDto } from './dto/create-check_in.dto';\r\n import { UpdateCheckInDto } from './dto/update-check_in.dto';\r\n import { InjectRepository ,InjectDataSource} from '@nestjs/typeorm';\r\n import { CheckIn } from './entities/check_in.entity';\r\n-import { Repository, Repository} from 'typeorm';\r\n import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n import { Repository, DataSource } from 'typeorm';\r\n import { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\n import type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n @Injectable()\r\n export class CheckInService {\r\n   constructor(\r\n+    \r\n     @InjectRepository(CheckIn)\r\n     private checkInRepository: Repository<CheckIn>,\r\n     @InjectRepository(BookingDetail)\r\n     private bookingDetailRepository: Repository<BookingDetail>,\r\n"
                },
                {
                    "date": 1756307777588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Injectable } from '@nestjs/common';\r\n+import { Inject, Injectable } from '@nestjs/common';\r\n import { CreateCheckInDto } from './dto/create-check_in.dto';\r\n import { UpdateCheckInDto } from './dto/update-check_in.dto';\r\n import { InjectRepository ,InjectDataSource} from '@nestjs/typeorm';\r\n import { CheckIn } from './entities/check_in.entity';\r\n@@ -9,9 +9,11 @@\n import type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n @Injectable()\r\n export class CheckInService {\r\n   constructor(\r\n-    \r\n+    @InjectDataSource() private readonly dataSource: DataSource,\r\n+    @Inject(TRANSACTION_MANAGER_SERVICE)\r\n+    private readonly transactionManager: ITransactionManager,\r\n     @InjectRepository(CheckIn)\r\n     private checkInRepository: Repository<CheckIn>,\r\n     @InjectRepository(BookingDetail)\r\n     private bookingDetailRepository: Repository<BookingDetail>,\r\n"
                },
                {
                    "date": 1756307794828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { UpdateCheckInDto } from './dto/update-check_in.dto';\r\n import { InjectRepository ,InjectDataSource} from '@nestjs/typeorm';\r\n import { CheckIn } from './entities/check_in.entity';\r\n import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n+import \r\n import { Repository, DataSource } from 'typeorm';\r\n import { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\n import type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n @Injectable()\r\n"
                },
                {
                    "date": 1756307799879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { UpdateCheckInDto } from './dto/update-check_in.dto';\r\n import { InjectRepository ,InjectDataSource} from '@nestjs/typeorm';\r\n import { CheckIn } from './entities/check_in.entity';\r\n import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n-import \r\n+import {Detail}\r\n import { Repository, DataSource } from 'typeorm';\r\n import { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\n import type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n @Injectable()\r\n"
                },
                {
                    "date": 1756307807364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { UpdateCheckInDto } from './dto/update-check_in.dto';\r\n import { InjectRepository ,InjectDataSource} from '@nestjs/typeorm';\r\n import { CheckIn } from './entities/check_in.entity';\r\n import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n-import {Detail}\r\n+import { DetailsScan } from '../details_scan/entities/details_scan.entity';\r\n import { Repository, DataSource } from 'typeorm';\r\n import { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\n import type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n @Injectable()\r\n@@ -17,8 +17,9 @@\n     @InjectRepository(CheckIn)\r\n     private checkInRepository: Repository<CheckIn>,\r\n     @InjectRepository(BookingDetail)\r\n     private bookingDetailRepository: Repository<BookingDetail>,\r\n+    \r\n   ) {}\r\n   async create(createCheckInDto: CreateCheckInDto) {\r\n       try {\r\n          const bookingDetail = await this.bookingDetailRepository.findOne({\r\n"
                },
                {
                    "date": 1756308031374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,41 +17,62 @@\n     @InjectRepository(CheckIn)\r\n     private checkInRepository: Repository<CheckIn>,\r\n     @InjectRepository(BookingDetail)\r\n     private bookingDetailRepository: Repository<BookingDetail>,\r\n-    \r\n+    @InjectRepository(DetailsScan)\r\n+    private detailsScanRepository: Repository<DetailsScan>,\r\n   ) {}\r\n   async create(createCheckInDto: CreateCheckInDto) {\r\n-      try {\r\n-         const bookingDetail = await this.bookingDetailRepository.findOne({\r\n-          where: { id: createCheckInDto.booking_details },\r\n-          relations: ['check_in'],\r\n-        });\r\n+    return this.transactionManager.runInTransaction(\r\n+      this.dataSource,\r\n+      async (manager) => {\r\n+        try {\r\n+          // Find booking detail with check-in relation\r\n+          const bookingDetail = await manager.findOne(BookingDetail, {\r\n+            where: { id: createCheckInDto.booking_details },\r\n+            relations: ['check_in', 'booking', 'booking.concert'],\r\n+          });\r\n \r\n-        if (!bookingDetail) {\r\n-          throw new Error(`BookingDetail with id ${createCheckInDto.booking_details} not found`);\r\n-        }\r\n+          if (!bookingDetail) {\r\n+            throw new Error(`BookingDetail with id ${createCheckInDto.booking_details} not found`);\r\n+          }\r\n \r\n-        if (bookingDetail.check_in) {\r\n-          throw new Error(`BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`);\r\n-        }\r\n+          if (bookingDetail.check_in) {\r\n+            throw new Error(`BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`);\r\n+          }\r\n \r\n-        const checkIn = this.checkInRepository.create({\r\n-          booking_details: bookingDetail,\r\n-        });\r\n+          // Create check-in record\r\n+          const checkIn = manager.create(CheckIn, {\r\n+            booking_details: bookingDetail,\r\n+          });\r\n+          const savedCheckIn = await manager.save(CheckIn, checkIn);\r\n \r\n-        await this.checkInRepository.save(checkIn);\r\n+          // Update booking detail status\r\n+          bookingDetail.status = true;\r\n+          await manager.save(BookingDetail, bookingDetail);\r\n \r\n-        // Update the status in BookingDetail\r\n-        bookingDetail.status = true;\r\n-        await this.bookingDetailRepository.save(bookingDetail);\r\n+          // Create details scan record\r\n+          const detailsScan = manager.create(DetailsScan, {\r\n+            amount: bookingDetail.booking.concert.price, // Use concert price as amount\r\n+            company_id: createCheckInDto.company_id,\r\n+            check_in_id: savedCheckIn.id,\r\n+            is_verified: true, // Set initial verification status\r\n+            notes: `Check-in for booking ${bookingDetail.booking.id}, ticket ${bookingDetail.id}`\r\n+          });\r\n+          const savedDetailsScan = await manager.save(DetailsScan, detailsScan);\r\n \r\n-        return `This action adds a new checkIn`;\r\n-      } catch (error) {\r\n-        console.log(error);\r\n-        throw error;\r\n+          return {\r\n+            message: 'Check-in completed successfully',\r\n+            checkIn: savedCheckIn,\r\n+            bookingDetail: bookingDetail,\r\n+            detailsScan: savedDetailsScan\r\n+          };\r\n+        } catch (error) {\r\n+          console.error('Error in check-in transaction:', error);\r\n+          throw error; // Transaction will automatically rollback\r\n+        }\r\n       }\r\n-\r\n+    );\r\n   }\r\n \r\n   findAll() {\r\n     return `This action returns all checkIn`;\r\n"
                },
                {
                    "date": 1756308046217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,9 @@\n   update(id: number, updateCheckInDto: UpdateCheckInDto) {\r\n     return `This action updates a #${id} checkIn`;\r\n   }\r\n \r\n+\r\n   remove(id: number) {\r\n     return `This action removes a #${id} checkIn`;\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1756308052110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,8 @@\n   update(id: number, updateCheckInDto: UpdateCheckInDto) {\r\n     return `This action updates a #${id} checkIn`;\r\n   }\r\n \r\n-\r\n   remove(id: number) {\r\n     return `This action removes a #${id} checkIn`;\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1756308200699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n           await manager.save(BookingDetail, bookingDetail);\r\n \r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n-            amount: bookingDetail.booking.concert.price, // Use concert price as amount\r\n+            amount: bookingDetail.booking., // Use concert price as amount\r\n             company_id: createCheckInDto.company_id,\r\n             check_in_id: savedCheckIn.id,\r\n             is_verified: true, // Set initial verification status\r\n             notes: `Check-in for booking ${bookingDetail.booking.id}, ticket ${bookingDetail.id}`\r\n"
                },
                {
                    "date": 1756308720357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n             company_id: createCheckInDto.company_id,\r\n             check_in_id: savedCheckIn.id,\r\n-            is_verified: true, // Set initial verification status\r\n+           \r\n             notes: `Check-in for booking ${bookingDetail.booking.id}, ticket ${bookingDetail.id}`\r\n           });\r\n           const savedDetailsScan = await manager.save(DetailsScan, detailsScan);\r\n \r\n"
                },
                {
                    "date": 1756308783284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,12 +52,11 @@\n \r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n-            company_id: createCheckInDto.company_id,\r\n+            company_id: bookingDetail.company_id,\r\n             check_in_id: savedCheckIn.id,\r\n            \r\n-            notes: `Check-in for booking ${bookingDetail.booking.id}, ticket ${bookingDetail.id}`\r\n           });\r\n           const savedDetailsScan = await manager.save(DetailsScan, detailsScan);\r\n \r\n           return {\r\n"
                },
                {
                    "date": 1756308792358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n-            company_id: bookingDetail.company_id,\r\n+            company_id: bookingDetail.booking,\r\n             check_in_id: savedCheckIn.id,\r\n            \r\n           });\r\n           const savedDetailsScan = await manager.save(DetailsScan, detailsScan);\r\n"
                },
                {
                    "date": 1756308800950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n-            company_id: bookingDetail.booking,\r\n+            company_id: bookingDetail.booking.user.,\r\n             check_in_id: savedCheckIn.id,\r\n            \r\n           });\r\n           const savedDetailsScan = await manager.save(DetailsScan, detailsScan);\r\n"
                },
                {
                    "date": 1756308824475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,13 +48,13 @@\n \r\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n-\r\n+          \r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n-            company_id: bookingDetail.booking.user.,\r\n+            company_id: bookingDetail.booking.user.companies.id,\r\n             check_in_id: savedCheckIn.id,\r\n            \r\n           });\r\n           const savedDetailsScan = await manager.save(DetailsScan, detailsScan);\r\n"
                },
                {
                    "date": 1756308836828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,9 @@\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n           \r\n+          const \r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n             company_id: bookingDetail.booking.user.companies.id,\r\n"
                },
                {
                    "date": 1756308843075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n           \r\n-          const \r\n+          const detailSan\r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n             company_id: bookingDetail.booking.user.companies.id,\r\n"
                },
                {
                    "date": 1756308853108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n           \r\n-          const detailSan\r\n+          const checkdetailScan\r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n             company_id: bookingDetail.booking.user.companies.id,\r\n"
                },
                {
                    "date": 1756308866422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n           \r\n-          const checkdetailScan\r\n+          const checkDetailScan = aw\r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n             company_id: bookingDetail.booking.user.companies.id,\r\n"
                },
                {
                    "date": 1756308871641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n           \r\n-          const checkDetailScan = aw\r\n+          const checkDetailScan = await \r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n             company_id: bookingDetail.booking.user.companies.id,\r\n"
                },
                {
                    "date": 1756308888173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n           \r\n-          const checkDetailScan = await \r\n+          const checkDetailScan = await detailsScanRepository\r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n             company_id: bookingDetail.booking.user.companies.id,\r\n"
                },
                {
                    "date": 1756308894324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,11 @@\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n           \r\n-          const checkDetailScan = await detailsScanRepository\r\n+          const checkDetailScan = await this.detailsScanRepository.findOne({\r\n+            \r\n+          })\r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n             company_id: bookingDetail.booking.user.companies.id,\r\n"
                },
                {
                    "date": 1756308939428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n           \r\n           const checkDetailScan = await this.detailsScanRepository.findOne({\r\n-            \r\n+            where: { check_in_id: savedCheckIn.id },\r\n           })\r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n"
                },
                {
                    "date": 1756308944995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n           \r\n           const checkDetailScan = await this.detailsScanRepository.findOne({\r\n-            where: { check_in_id: savedCheckIn.id },\r\n+            where: { company: savedCheckIn.id },\r\n           })\r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n"
                },
                {
                    "date": 1756308952062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n           \r\n           const checkDetailScan = await this.detailsScanRepository.findOne({\r\n-            where: { company: savedCheckIn.id },\r\n+            where: { company: .id },\r\n           })\r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n"
                },
                {
                    "date": 1756308961712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n           \r\n           const checkDetailScan = await this.detailsScanRepository.findOne({\r\n-            where: { company: .id },\r\n+            where: { company: bookingDetail.booking.user.companies.id },\r\n           })\r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n"
                },
                {
                    "date": 1756309004284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,10 @@\n           \r\n           const checkDetailScan = await this.detailsScanRepository.findOne({\r\n             where: { company: bookingDetail.booking.user.companies.id },\r\n           })\r\n+\r\n+          if \r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n             company_id: bookingDetail.booking.user.companies.id,\r\n"
                },
                {
                    "date": 1756309026375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n           const checkDetailScan = await this.detailsScanRepository.findOne({\r\n             where: { company: bookingDetail.booking.user.companies.id },\r\n           })\r\n \r\n-          if \r\n+          if (checkDetailScan.)\r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n             company_id: bookingDetail.booking.user.companies.id,\r\n"
                },
                {
                    "date": 1756309052888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n           const checkDetailScan = await this.detailsScanRepository.findOne({\r\n             where: { company: bookingDetail.booking.user.companies.id },\r\n           })\r\n \r\n-          if (checkDetailScan.)\r\n+          \r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: bookingDetail.booking., // Use concert price as amount\r\n             company_id: bookingDetail.booking.user.companies.id,\r\n"
                },
                {
                    "date": 1756309077630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,12 +53,12 @@\n           const checkDetailScan = await this.detailsScanRepository.findOne({\r\n             where: { company: bookingDetail.booking.user.companies.id },\r\n           })\r\n \r\n-          \r\n+          const amount = checkDetailScan.amount\r\n           // Create details scan record\r\n           const detailsScan = manager.create(DetailsScan, {\r\n-            amount: bookingDetail.booking., // Use concert price as amount\r\n+            amount: , // Use concert price as amount\r\n             company_id: bookingDetail.booking.user.companies.id,\r\n             check_in_id: savedCheckIn.id,\r\n            \r\n           });\r\n"
                },
                {
                    "date": 1756309301322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,19 +49,27 @@\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n           \r\n-          const checkDetailScan = await this.detailsScanRepository.findOne({\r\n-            where: { company: bookingDetail.booking.user.companies.id },\r\n-          })\r\n+          // Get the company ID\r\n+          const companyId = bookingDetail.booking.user.companies.id;\r\n \r\n-          const amount = checkDetailScan.amount\r\n-          // Create details scan record\r\n+          // Get the last detail scan for this company to get the current amount\r\n+          const lastDetailScan = await manager\r\n+            .createQueryBuilder(DetailsScan, 'detailsScan')\r\n+            .where('detailsScan.company_id = :companyId', { companyId })\r\n+            .orderBy('detailsScan.created_at', 'DESC')\r\n+            .getOne();\r\n+\r\n+          // Calculate new amount (previous amount + 1, or 1 if first entry)\r\n+          const newAmount = lastDetailScan ? lastDetailScan.amount + 1 : 1;\r\n+\r\n+          // Create details scan record with incremented amount\r\n           const detailsScan = manager.create(DetailsScan, {\r\n-            amount: , // Use concert price as amount\r\n-            company_id: bookingDetail.booking.user.companies.id,\r\n+            amount: newAmount,\r\n+            company_id: companyId,\r\n             check_in_id: savedCheckIn.id,\r\n-           \r\n+            notes: `Scan count: ${newAmount}`\r\n           });\r\n           const savedDetailsScan = await manager.save(DetailsScan, detailsScan);\r\n \r\n           return {\r\n"
                },
                {
                    "date": 1756309342492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: newAmount,\r\n             company_id: companyId,\r\n             check_in_id: savedCheckIn.id,\r\n-            notes: `Scan count: ${newAmount}`\r\n+            \r\n           });\r\n           const savedDetailsScan = await manager.save(DetailsScan, detailsScan);\r\n \r\n           return {\r\n"
                },
                {
                    "date": 1756309354592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,10 +66,9 @@\n           // Create details scan record with incremented amount\r\n           const detailsScan = manager.create(DetailsScan, {\r\n             amount: newAmount,\r\n             company_id: companyId,\r\n-            check_in_id: savedCheckIn.id,\r\n-            \r\n+            check_in_id: savedCheckIn.id,            \r\n           });\r\n           const savedDetailsScan = await manager.save(DetailsScan, detailsScan);\r\n \r\n           return {\r\n"
                },
                {
                    "date": 1756309652573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         try {\r\n           // Find booking detail with check-in relation\r\n           const bookingDetail = await manager.findOne(BookingDetail, {\r\n             where: { id: createCheckInDto.booking_details },\r\n-            relations: ['check_in', 'booking', 'booking.concert'],\r\n+            relations: ['check_in', 'booking', 'booking.concert', 'booking.user', 'booking.user.companies'],\r\n           });\r\n \r\n           if (!bookingDetail) {\r\n             throw new Error(`BookingDetail with id ${createCheckInDto.booking_details} not found`);\r\n"
                },
                {
                    "date": 1756309719669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n           // Get the last detail scan for this company to get the current amount\r\n           const lastDetailScan = await manager\r\n             .createQueryBuilder(DetailsScan, 'detailsScan')\r\n             .where('detailsScan.company_id = :companyId', { companyId })\r\n-            .orderBy('detailsScan.created_at', 'DESC')\r\n+            .orderBy('detailsScan.createdAt', 'DESC')\r\n             .getOne();\r\n \r\n           // Calculate new amount (previous amount + 1, or 1 if first entry)\r\n           const newAmount = lastDetailScan ? lastDetailScan.amount + 1 : 1;\r\n"
                },
                {
                    "date": 1756310200680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,25 +52,29 @@\n           \r\n           // Get the company ID\r\n           const companyId = bookingDetail.booking.user.companies.id;\r\n \r\n-          // Get the last detail scan for this company to get the current amount\r\n-          const lastDetailScan = await manager\r\n-            .createQueryBuilder(DetailsScan, 'detailsScan')\r\n-            .where('detailsScan.company_id = :companyId', { companyId })\r\n-            .orderBy('detailsScan.createdAt', 'DESC')\r\n-            .getOne();\r\n+          // Find existing detail scan for this company\r\n+          let detailsScan = await manager.findOne(DetailsScan, {\r\n+            where: { company_id: companyId }\r\n+          });\r\n \r\n-          // Calculate new amount (previous amount + 1, or 1 if first entry)\r\n-          const newAmount = lastDetailScan ? lastDetailScan.amount + 1 : 1;\r\n+          if (detailsScan) {\r\n+            // If record exists for this company, update the amount\r\n+            detailsScan.amount += 1;\r\n+            detailsScan.check_in_id = savedCheckIn.id;\r\n+            await manager.save(DetailsScan, detailsScan);\r\n+          } else {\r\n+            // If no record exists for this company, create new one starting at amount 1\r\n+            detailsScan = manager.create(DetailsScan, {\r\n+              amount: 1,\r\n+              company_id: companyId,\r\n+              check_in_id: savedCheckIn.id,\r\n+            });\r\n+            await manager.save(DetailsScan, detailsScan);\r\n+          }\r\n \r\n-          // Create details scan record with incremented amount\r\n-          const detailsScan = manager.create(DetailsScan, {\r\n-            amount: newAmount,\r\n-            company_id: companyId,\r\n-            check_in_id: savedCheckIn.id,            \r\n-          });\r\n-          const savedDetailsScan = await manager.save(DetailsScan, detailsScan);\r\n+          const savedDetailsScan = detailsScan;\r\n \r\n           return {\r\n             message: 'Check-in completed successfully',\r\n             checkIn: savedCheckIn,\r\n"
                },
                {
                    "date": 1756310593338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,26 +53,27 @@\n           // Get the company ID\r\n           const companyId = bookingDetail.booking.user.companies.id;\r\n \r\n           // Find existing detail scan for this company\r\n-          let detailsScan = await manager.findOne(DetailsScan, {\r\n-            where: { company_id: companyId }\r\n-          });\r\n+let detailsScan = await manager.findOne(DetailsScan, {\r\n+  where: { company: { id: companyId } },  // <-- must query by relation\r\n+  relations: ['company'],\r\n+});\r\n \r\n-          if (detailsScan) {\r\n-            // If record exists for this company, update the amount\r\n-            detailsScan.amount += 1;\r\n-            detailsScan.check_in_id = savedCheckIn.id;\r\n-            await manager.save(DetailsScan, detailsScan);\r\n-          } else {\r\n-            // If no record exists for this company, create new one starting at amount 1\r\n-            detailsScan = manager.create(DetailsScan, {\r\n-              amount: 1,\r\n-              company_id: companyId,\r\n-              check_in_id: savedCheckIn.id,\r\n-            });\r\n-            await manager.save(DetailsScan, detailsScan);\r\n-          }\r\n+if (detailsScan) {\r\n+  // If record exists for this company, update the amount\r\n+  detailsScan.amount += 1;\r\n+  detailsScan.check_in = savedCheckIn;\r\n+  await manager.save(DetailsScan, detailsScan);\r\n+} else {\r\n+  // If no record exists for this company, create new one starting at amount 1\r\n+  detailsScan = manager.create(DetailsScan, {\r\n+    amount: 1,\r\n+    company: { id: companyId }, // <-- set relation\r\n+    check_in: savedCheckIn,\r\n+  });\r\n+  await manager.save(DetailsScan, detailsScan);\r\n+}\r\n \r\n           const savedDetailsScan = detailsScan;\r\n \r\n           return {\r\n"
                },
                {
                    "date": 1756311246689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { Inject, Injectable } from '@nestjs/common';\r\n import { CreateCheckInDto } from './dto/create-check_in.dto';\r\n import { UpdateCheckInDto } from './dto/update-check_in.dto';\r\n-import { InjectRepository ,InjectDataSource} from '@nestjs/typeorm';\r\n+import { InjectRepository, InjectDataSource } from '@nestjs/typeorm';\r\n import { CheckIn } from './entities/check_in.entity';\r\n import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n import { DetailsScan } from '../details_scan/entities/details_scan.entity';\r\n import { Repository, DataSource } from 'typeorm';\r\n@@ -21,24 +21,36 @@\n     @InjectRepository(DetailsScan)\r\n     private detailsScanRepository: Repository<DetailsScan>,\r\n   ) {}\r\n   async create(createCheckInDto: CreateCheckInDto) {\r\n+\r\n+     \r\n     return this.transactionManager.runInTransaction(\r\n       this.dataSource,\r\n       async (manager) => {\r\n         try {\r\n           // Find booking detail with check-in relation\r\n           const bookingDetail = await manager.findOne(BookingDetail, {\r\n             where: { id: createCheckInDto.booking_details },\r\n-            relations: ['check_in', 'booking', 'booking.concert', 'booking.user', 'booking.user.companies'],\r\n+            relations: [\r\n+              'check_in',\r\n+              'booking',\r\n+              'booking.concert',\r\n+              'booking.user',\r\n+              'booking.user.companies',\r\n+            ],\r\n           });\r\n \r\n           if (!bookingDetail) {\r\n-            throw new Error(`BookingDetail with id ${createCheckInDto.booking_details} not found`);\r\n+            throw new Error(\r\n+              `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n+            );\r\n           }\r\n \r\n           if (bookingDetail.check_in) {\r\n-            throw new Error(`BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`);\r\n+            throw new Error(\r\n+              `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n+            );\r\n           }\r\n \r\n           // Create check-in record\r\n           const checkIn = manager.create(CheckIn, {\r\n@@ -48,46 +60,46 @@\n \r\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n-          \r\n+\r\n           // Get the company ID\r\n           const companyId = bookingDetail.booking.user.companies.id;\r\n \r\n           // Find existing detail scan for this company\r\n-let detailsScan = await manager.findOne(DetailsScan, {\r\n-  where: { company: { id: companyId } },  // <-- must query by relation\r\n-  relations: ['company'],\r\n-});\r\n+          let detailsScan = await manager.findOne(DetailsScan, {\r\n+            where: { company: { id: companyId } }, // <-- must query by relation\r\n+            relations: ['company'],\r\n+          });\r\n \r\n-if (detailsScan) {\r\n-  // If record exists for this company, update the amount\r\n-  detailsScan.amount += 1;\r\n-  detailsScan.check_in = savedCheckIn;\r\n-  await manager.save(DetailsScan, detailsScan);\r\n-} else {\r\n-  // If no record exists for this company, create new one starting at amount 1\r\n-  detailsScan = manager.create(DetailsScan, {\r\n-    amount: 1,\r\n-    company: { id: companyId }, // <-- set relation\r\n-    check_in: savedCheckIn,\r\n-  });\r\n-  await manager.save(DetailsScan, detailsScan);\r\n-}\r\n+          if (detailsScan) {\r\n+            // If record exists for this company, update the amount\r\n+            detailsScan.amount += 1;\r\n+            detailsScan.check_in = savedCheckIn;\r\n+            await manager.save(DetailsScan, detailsScan);\r\n+          } else {\r\n+            // If no record exists for this company, create new one starting at amount 1\r\n+            detailsScan = manager.create(DetailsScan, {\r\n+              amount: 1,\r\n+              company: { id: companyId }, // <-- set relation\r\n+              check_in: savedCheckIn,\r\n+            });\r\n+            await manager.save(DetailsScan, detailsScan);\r\n+          }\r\n \r\n           const savedDetailsScan = detailsScan;\r\n \r\n           return {\r\n             message: 'Check-in completed successfully',\r\n             checkIn: savedCheckIn,\r\n             bookingDetail: bookingDetail,\r\n-            detailsScan: savedDetailsScan\r\n+            detailsScan: savedDetailsScan,\r\n           };\r\n         } catch (error) {\r\n           console.error('Error in check-in transaction:', error);\r\n           throw error; // Transaction will automatically rollback\r\n         }\r\n-      }\r\n+      },\r\n     );\r\n   }\r\n \r\n   findAll() {\r\n"
                },
                {
                    "date": 1756311259748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n               'booking.user',\r\n               'booking.user.companies',\r\n             ],\r\n           });\r\n-\r\n+          \r\n           if (!bookingDetail) {\r\n             throw new Error(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n             );\r\n"
                },
                {
                    "date": 1756311271322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,14 +38,18 @@\n               'booking.user',\r\n               'booking.user.companies',\r\n             ],\r\n           });\r\n-          \r\n           if (!bookingDetail) {\r\n             throw new Error(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n             );\r\n           }\r\n+          if (!bookingDetail) {\r\n+            throw new Error(\r\n+              `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n+            );\r\n+          }\r\n \r\n           if (bookingDetail.check_in) {\r\n             throw new Error(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n"
                },
                {
                    "date": 1756311276624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n               'booking.user',\r\n               'booking.user.companies',\r\n             ],\r\n           });\r\n-          if (!bookingDetail) {\r\n+          if (bookingDetail.) {\r\n             throw new Error(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n             );\r\n           }\r\n"
                },
                {
                    "date": 1756311284956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n               'booking.user',\r\n               'booking.user.companies',\r\n             ],\r\n           });\r\n-          if (bookingDetail.) {\r\n+          if (bookingDetail?.booking.details) {\r\n             throw new Error(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n             );\r\n           }\r\n"
                },
                {
                    "date": 1756311299496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n               'booking.user',\r\n               'booking.user.companies',\r\n             ],\r\n           });\r\n-          if (bookingDetail?.booking.details) {\r\n+          if (bookingDetail?.booking.details.stat) {\r\n             throw new Error(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n             );\r\n           }\r\n"
                },
                {
                    "date": 1756311309420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,14 +33,15 @@\n             where: { id: createCheckInDto.booking_details },\r\n             relations: [\r\n               'check_in',\r\n               'booking',\r\n+              \r\n               'booking.concert',\r\n               'booking.user',\r\n               'booking.user.companies',\r\n             ],\r\n           });\r\n-          if (bookingDetail?.booking.details.stat) {\r\n+          if (bookingDetail?.booking.) {\r\n             throw new Error(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n             );\r\n           }\r\n"
                },
                {
                    "date": 1756311315561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             where: { id: createCheckInDto.booking_details },\r\n             relations: [\r\n               'check_in',\r\n               'booking',\r\n-              \r\n+              ''\r\n               'booking.concert',\r\n               'booking.user',\r\n               'booking.user.companies',\r\n             ],\r\n"
                },
                {
                    "date": 1756311320920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             where: { id: createCheckInDto.booking_details },\r\n             relations: [\r\n               'check_in',\r\n               'booking',\r\n-              ''\r\n+              'booking.',\r\n               'booking.concert',\r\n               'booking.user',\r\n               'booking.user.companies',\r\n             ],\r\n"
                },
                {
                    "date": 1756311334213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             where: { id: createCheckInDto.booking_details },\r\n             relations: [\r\n               'check_in',\r\n               'booking',\r\n-              'booking.',\r\n+              'booking.bookingD',\r\n               'booking.concert',\r\n               'booking.user',\r\n               'booking.user.companies',\r\n             ],\r\n"
                },
                {
                    "date": 1756311342788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,15 +33,15 @@\n             where: { id: createCheckInDto.booking_details },\r\n             relations: [\r\n               'check_in',\r\n               'booking',\r\n-              'booking.bookingD',\r\n+              'booking.bookingDetails',\r\n               'booking.concert',\r\n               'booking.user',\r\n               'booking.user.companies',\r\n             ],\r\n           });\r\n-          if (bookingDetail?.booking.) {\r\n+          if (bookingDetail?.booking.B) {\r\n             throw new Error(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n             );\r\n           }\r\n"
                },
                {
                    "date": 1756311349246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n               'booking.user',\r\n               'booking.user.companies',\r\n             ],\r\n           });\r\n-          if (bookingDetail?.booking.B) {\r\n+          if (bookingDetail?.booking.booking) {\r\n             throw new Error(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n             );\r\n           }\r\n"
                },
                {
                    "date": 1756311413230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n               'booking.user',\r\n               'booking.user.companies',\r\n             ],\r\n           });\r\n-          if (bookingDetail?.booking.details) {\r\n+          if (bookingDetail?.booking.details.) {\r\n             throw new Error(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n             );\r\n           }\r\n"
                }
            ],
            "date": 1756306346539,
            "name": "Commit-0",
            "content": "import { Injectable } from '@nestjs/common';\r\nimport { CreateCheckInDto } from './dto/create-check_in.dto';\r\nimport { UpdateCheckInDto } from './dto/update-check_in.dto';\r\n\r\n@Injectable()\r\nexport class CheckInService {\r\n  create(createCheckInDto: CreateCheckInDto) {\r\n    \r\n  }\r\n\r\n  findAll() {\r\n    return `This action returns all checkIn`;\r\n  }\r\n\r\n  findOne(id: number) {\r\n    return `This action returns a #${id} checkIn`;\r\n  }\r\n\r\n  update(id: number, updateCheckInDto: UpdateCheckInDto) {\r\n    return `This action updates a #${id} checkIn`;\r\n  }\r\n\r\n  remove(id: number) {\r\n    return `This action removes a #${id} checkIn`;\r\n  }\r\n}\r\n"
        }
    ]
}