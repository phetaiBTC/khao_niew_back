{
    "sourceFile": "src/modules/check_in/check_in.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1756737111626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756739224597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n           });\r\n           const savedCheckIn = await manager.save(CheckIn, checkIn);\r\n \r\n           // Update booking detail status\r\n-          bookingDetail.status = true;\r\n+          bookingDetail.status = 2;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n \r\n           // Get the company ID\r\n           const companyId = bookingDetail.booking.user.companies.id;\r\n"
                },
                {
                    "date": 1756739230600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n           });\r\n           const savedCheckIn = await manager.save(CheckIn, checkIn);\r\n \r\n           // Update booking detail status\r\n-          bookingDetail.status = 2;\r\n+          bookingDetail.status = \"1\";\r\n           await manager.save(BookingDetail, bookingDetail);\r\n \r\n           // Get the company ID\r\n           const companyId = bookingDetail.booking.user.companies.id;\r\n"
                },
                {
                    "date": 1756739242786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n           });\r\n           const savedCheckIn = await manager.save(CheckIn, checkIn);\r\n \r\n           // Update booking detail status\r\n-          bookingDetail.status = \"1\";\r\n+          bookingDetail.status = tu;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n \r\n           // Get the company ID\r\n           const companyId = bookingDetail.booking.user.companies.id;\r\n"
                },
                {
                    "date": 1756739248716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n           });\r\n           const savedCheckIn = await manager.save(CheckIn, checkIn);\r\n \r\n           // Update booking detail status\r\n-          bookingDetail.status = tu;\r\n+          bookingDetail.status = true;\r\n           await manager.save(BookingDetail, bookingDetail);\r\n \r\n           // Get the company ID\r\n           const companyId = bookingDetail.booking.user.companies.id;\r\n"
                },
                {
                    "date": 1756739657141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n             throw new NotFoundException(\r\n               `You have already been checked in`,\r\n             );\r\n           }\r\n-          if (bookingDetail.check_in) {\r\n+          if (bookingDetail.check_in) {bookingDetail\r\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n             );\r\n           }\r\n@@ -61,9 +61,9 @@\n           const savedCheckIn = await manager.save(CheckIn, checkIn);\r\n \r\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n-          await manager.save(BookingDetail, bookingDetail);\r\n+          await manager.save(BookingDetail, );\r\n \r\n           // Get the company ID\r\n           const companyId = bookingDetail.booking.user.companies.id;\r\n \r\n"
                },
                {
                    "date": 1756739687865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n \r\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n           await manager.save(BookingDetail, );\r\n-\r\n+        \r\n           // Get the company ID\r\n           const companyId = bookingDetail.booking.user.companies.id;\r\n \r\n           // Find existing detail scan for this company\r\n"
                },
                {
                    "date": 1756739694083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,10 +61,10 @@\n           const savedCheckIn = await manager.save(CheckIn, checkIn);\r\n \r\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n-          await manager.save(BookingDetail, );\r\n-        \r\n+          await manager.save(BookingDetail, bookingDetail);\r\n+\r\n           // Get the company ID\r\n           const companyId = bookingDetail.booking.user.companies.id;\r\n \r\n           // Find existing detail scan for this company\r\n"
                },
                {
                    "date": 1756739699338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n           const savedCheckIn = await manager.save(CheckIn, checkIn);\r\n \r\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n-          await manager.save(BookingDetail, bookingDetail);\r\n+        const   await manager.save(BookingDetail, bookingDetail);\r\n \r\n           // Get the company ID\r\n           const companyId = bookingDetail.booking.user.companies.id;\r\n \r\n"
                },
                {
                    "date": 1756739704747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import { Inject, Injectable, NotFoundException } from '@nestjs/common';\r\n+import { CreateCheckInDto } from './dto/create-check_in.dto';\r\n+import { UpdateCheckInDto } from './dto/update-check_in.dto';\r\n+import { InjectRepository, InjectDataSource } from '@nestjs/typeorm';\r\n+import { CheckIn } from './entities/check_in.entity';\r\n+import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n+import { DetailsScan } from '../details_scan/entities/details_scan.entity';\r\n+import { Repository, DataSource } from 'typeorm';\r\n+import { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\n+import type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n+@Injectable()\r\n+export class CheckInService {\r\n+  constructor(\r\n+    @InjectDataSource() private readonly dataSource: DataSource,\r\n+    @Inject(TRANSACTION_MANAGER_SERVICE)\r\n+    private readonly transactionManager: ITransactionManager,\r\n+    @InjectRepository(CheckIn)\r\n+    private checkInRepository: Repository<CheckIn>,\r\n+    @InjectRepository(BookingDetail)\r\n+    private bookingDetailRepository: Repository<BookingDetail>,\r\n+    @InjectRepository(DetailsScan)\r\n+    private detailsScanRepository: Repository<DetailsScan>,\r\n+  ) {}\r\n+  async create(createCheckInDto: CreateCheckInDto) {\r\n+    return this.transactionManager.runInTransaction(\r\n+      this.dataSource,\r\n+      async (manager) => {\r\n+        try {\r\n+          // Find booking detail with check-in relation\r\n+          const bookingDetail = await manager.findOne(BookingDetail, {\r\n+            where: { id: createCheckInDto.booking_details },\r\n+            relations: [\r\n+              'check_in',\r\n+              'booking',\r\n+              'booking.concert',\r\n+              'booking.user',\r\n+              'booking.user.companies',\r\n+            ],\r\n+          });\r\n+\r\n+          if (!bookingDetail) {\r\n+            throw new NotFoundException(\r\n+              `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n+            );\r\n+          }\r\n+          if (bookingDetail.status == true) {\r\n+            throw new NotFoundException(\r\n+              `You have already been checked in`,\r\n+            );\r\n+          }\r\n+          if (bookingDetail.check_in) {bookingDetail\r\n+            throw new NotFoundException(\r\n+              `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n+            );\r\n+          }\r\n+\r\n+          // Create check-in record\r\n+          const checkIn = manager.create(CheckIn, {\r\n+            booking_details: bookingDetail,\r\n+          });\r\n+          const savedCheckIn = await manager.save(CheckIn, checkIn);\r\n+\r\n+          // Update booking detail status\r\n+          bookingDetail.status = true;\r\n+          const savedBookingDetail = await manager.save(BookingDetail, bookingDetail);\r\n+          console\r\n+          // Get the company ID\r\n+          const companyId = bookingDetail.booking.user.companies.id;\r\n+\r\n+          // Find existing detail scan for this company\r\n+          let detailsScan = await manager.findOne(DetailsScan, {\r\n+            where: { company: { id: companyId } },\r\n+            relations: ['company'],\r\n+          });\r\n+\r\n+          if (detailsScan) {\r\n+            // Update amount\r\n+            detailsScan.amount += 1;\r\n+\r\n+            // Append new check-in ID to array\r\n+            detailsScan.checkInIds = [\r\n+              ...(detailsScan.checkInIds || []),\r\n+              savedCheckIn.id,\r\n+            ];\r\n+\r\n+            savedCheckIn.detailsScan = detailsScan;\r\n+            await manager.save(CheckIn, savedCheckIn);\r\n+            await manager.save(DetailsScan, detailsScan);\r\n+          } else {\r\n+            // Create new details scan\r\n+            detailsScan = manager.create(DetailsScan, {\r\n+              amount: 1,\r\n+              company: { id: companyId },\r\n+              checkInIds: [savedCheckIn.id], // init with new check-in ID\r\n+            });\r\n+            detailsScan = await manager.save(DetailsScan, detailsScan);\r\n+\r\n+            savedCheckIn.detailsScan = detailsScan;\r\n+            await manager.save(CheckIn, savedCheckIn);\r\n+          }\r\n+          const savedDetailsScan = detailsScan;\r\n+\r\n+          return {\r\n+            message: 'Check-in completed successfully',\r\n+            checkIn: savedCheckIn,\r\n+            bookingDetail: bookingDetail,\r\n+            detailsScan: savedDetailsScan,\r\n+          };\r\n+        } catch (error) {\r\n+          console.error('Error in check-in transaction:', error);\r\n+          throw error; // Transaction will automatically rollback\r\n+        }\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  findAll() {\r\n+    return `This action returns all checkIn`;\r\n+  }\r\n+\r\n+  findOne(id: number) {\r\n+    return `This action returns a #${id} checkIn`;\r\n+  }\r\n+\r\n+  update(id: number, updateCheckInDto: UpdateCheckInDto) {\r\n+    return `This action updates a #${id} checkIn`;\r\n+  }\r\n+\r\n+  remove(id: number) {\r\n+    return `This action removes a #${id} checkIn`;\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1756739749590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n \r\n           // Update booking detail status\r\n           bookingDetail.status = true;\r\n           const savedBookingDetail = await manager.save(BookingDetail, bookingDetail);\r\n-          console\r\n+          console.log('Saved BookingDetail:', savedBookingDetail);\r\n           // Get the company ID\r\n           const companyId = bookingDetail.booking.user.companies.id;\r\n \r\n           // Find existing detail scan for this company\r\n@@ -129,136 +129,4 @@\n   remove(id: number) {\r\n     return `This action removes a #${id} checkIn`;\r\n   }\r\n }\r\n-import { Inject, Injectable, NotFoundException } from '@nestjs/common';\r\n-import { CreateCheckInDto } from './dto/create-check_in.dto';\r\n-import { UpdateCheckInDto } from './dto/update-check_in.dto';\r\n-import { InjectRepository, InjectDataSource } from '@nestjs/typeorm';\r\n-import { CheckIn } from './entities/check_in.entity';\r\n-import { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\n-import { DetailsScan } from '../details_scan/entities/details_scan.entity';\r\n-import { Repository, DataSource } from 'typeorm';\r\n-import { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\n-import type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n-@Injectable()\r\n-export class CheckInService {\r\n-  constructor(\r\n-    @InjectDataSource() private readonly dataSource: DataSource,\r\n-    @Inject(TRANSACTION_MANAGER_SERVICE)\r\n-    private readonly transactionManager: ITransactionManager,\r\n-    @InjectRepository(CheckIn)\r\n-    private checkInRepository: Repository<CheckIn>,\r\n-    @InjectRepository(BookingDetail)\r\n-    private bookingDetailRepository: Repository<BookingDetail>,\r\n-    @InjectRepository(DetailsScan)\r\n-    private detailsScanRepository: Repository<DetailsScan>,\r\n-  ) {}\r\n-  async create(createCheckInDto: CreateCheckInDto) {\r\n-    return this.transactionManager.runInTransaction(\r\n-      this.dataSource,\r\n-      async (manager) => {\r\n-        try {\r\n-          // Find booking detail with check-in relation\r\n-          const bookingDetail = await manager.findOne(BookingDetail, {\r\n-            where: { id: createCheckInDto.booking_details },\r\n-            relations: [\r\n-              'check_in',\r\n-              'booking',\r\n-              'booking.concert',\r\n-              'booking.user',\r\n-              'booking.user.companies',\r\n-            ],\r\n-          });\r\n-\r\n-          if (!bookingDetail) {\r\n-            throw new NotFoundException(\r\n-              `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n-            );\r\n-          }\r\n-          if (bookingDetail.status == true) {\r\n-            throw new NotFoundException(\r\n-              `You have already been checked in`,\r\n-            );\r\n-          }\r\n-          if (bookingDetail.check_in) {bookingDetail\r\n-            throw new NotFoundException(\r\n-              `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n-            );\r\n-          }\r\n-\r\n-          // Create check-in record\r\n-          const checkIn = manager.create(CheckIn, {\r\n-            booking_details: bookingDetail,\r\n-          });\r\n-          const savedCheckIn = await manager.save(CheckIn, checkIn);\r\n-\r\n-          // Update booking detail status\r\n-          bookingDetail.status = true;\r\n-        const   await manager.save(BookingDetail, bookingDetail);\r\n-\r\n-          // Get the company ID\r\n-          const companyId = bookingDetail.booking.user.companies.id;\r\n-\r\n-          // Find existing detail scan for this company\r\n-          let detailsScan = await manager.findOne(DetailsScan, {\r\n-            where: { company: { id: companyId } },\r\n-            relations: ['company'],\r\n-          });\r\n-\r\n-          if (detailsScan) {\r\n-            // Update amount\r\n-            detailsScan.amount += 1;\r\n-\r\n-            // Append new check-in ID to array\r\n-            detailsScan.checkInIds = [\r\n-              ...(detailsScan.checkInIds || []),\r\n-              savedCheckIn.id,\r\n-            ];\r\n-\r\n-            savedCheckIn.detailsScan = detailsScan;\r\n-            await manager.save(CheckIn, savedCheckIn);\r\n-            await manager.save(DetailsScan, detailsScan);\r\n-          } else {\r\n-            // Create new details scan\r\n-            detailsScan = manager.create(DetailsScan, {\r\n-              amount: 1,\r\n-              company: { id: companyId },\r\n-              checkInIds: [savedCheckIn.id], // init with new check-in ID\r\n-            });\r\n-            detailsScan = await manager.save(DetailsScan, detailsScan);\r\n-\r\n-            savedCheckIn.detailsScan = detailsScan;\r\n-            await manager.save(CheckIn, savedCheckIn);\r\n-          }\r\n-          const savedDetailsScan = detailsScan;\r\n-\r\n-          return {\r\n-            message: 'Check-in completed successfully',\r\n-            checkIn: savedCheckIn,\r\n-            bookingDetail: bookingDetail,\r\n-            detailsScan: savedDetailsScan,\r\n-          };\r\n-        } catch (error) {\r\n-          console.error('Error in check-in transaction:', error);\r\n-          throw error; // Transaction will automatically rollback\r\n-        }\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  findAll() {\r\n-    return `This action returns all checkIn`;\r\n-  }\r\n-\r\n-  findOne(id: number) {\r\n-    return `This action returns a #${id} checkIn`;\r\n-  }\r\n-\r\n-  update(id: number, updateCheckInDto: UpdateCheckInDto) {\r\n-    return `This action updates a #${id} checkIn`;\r\n-  }\r\n-\r\n-  remove(id: number) {\r\n-    return `This action removes a #${id} checkIn`;\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1756739759633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n             );\r\n           }\r\n+          cons\r\n           if (bookingDetail.status == true) {\r\n             throw new NotFoundException(\r\n               `You have already been checked in`,\r\n             );\r\n"
                },
                {
                    "date": 1756739767212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n             );\r\n           }\r\n-          cons\r\n+          console.log('Found BookingDetail:', bookingDetail.st);\r\n           if (bookingDetail.status == true) {\r\n             throw new NotFoundException(\r\n               `You have already been checked in`,\r\n             );\r\n"
                },
                {
                    "date": 1756739787575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,10 @@\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n             );\r\n           }\r\n-          console.log('Found BookingDetail:', bookingDetail.st);\r\n-          if (bookingDetail.status == true) {\r\n+          console.log('Found BookingDetail:', bookingDetail.status);\r\n+          if (bookingDetail.status == false) {\r\n             throw new NotFoundException(\r\n               `You have already been checked in`,\r\n             );\r\n           }\r\n"
                },
                {
                    "date": 1756739830855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n             );\r\n           }\r\n-\r\n+          if \r\n           // Create check-in record\r\n           const checkIn = manager.create(CheckIn, {\r\n             booking_details: bookingDetail,\r\n           });\r\n"
                },
                {
                    "date": 1756739837590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,13 @@\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n             );\r\n           }\r\n-          if \r\n+          if (bookingDetail.) {\r\n+            throw new NotFoundException(\r\n+              `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n+            );\r\n+          }\r\n           // Create check-in record\r\n           const checkIn = manager.create(CheckIn, {\r\n             booking_details: bookingDetail,\r\n           });\r\n"
                },
                {
                    "date": 1756739843886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n             );\r\n           }\r\n-          if (bookingDetail.) {\r\n+          if (bookingDetail.booking.p) {\r\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n             );\r\n           }\r\n"
                },
                {
                    "date": 1756739849773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n             );\r\n           }\r\n-          if (bookingDetail.booking.p) {\r\n+          if (bookingDetail.booking.payment.status == false) {\r\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n             );\r\n           }\r\n"
                },
                {
                    "date": 1756739857057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n             );\r\n           }\r\n-          if (bookingDetail.booking.payment.status == false) {\r\n+          if (bookingDetail.booking.payment.status == E) {\r\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n             );\r\n           }\r\n"
                },
                {
                    "date": 1756739886195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import { DetailsScan } from '../details_scan/entities/details_scan.entity';\r\n import { Repository, DataSource } from 'typeorm';\r\n import { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\n import type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n+import { PaymentStatus } from '../payment/entities/payment.entity';\r\n @Injectable()\r\n export class CheckInService {\r\n   constructor(\r\n     @InjectDataSource() private readonly dataSource: DataSource,\r\n@@ -53,9 +54,9 @@\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n             );\r\n           }\r\n-          if (bookingDetail.booking.payment.status == E) {\r\n+          if (bookingDetail.booking.payment.status == PaymentStatus) {\r\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n             );\r\n           }\r\n"
                },
                {
                    "date": 1756739897411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n             );\r\n           }\r\n-          if (bookingDetail.booking.payment.status == PaymentStatus) {\r\n+          if (bookingDetail.booking.payment.status !== PaymentStatus.SUCCESS) {\r\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n             );\r\n           }\r\n"
                },
                {
                    "date": 1756739911671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n             );\r\n           }\r\n           if (bookingDetail.booking.payment.status !== PaymentStatus.SUCCESS) {\r\n             throw new NotFoundException(\r\n-              `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n+             ,\r\n             );\r\n           }\r\n           // Create check-in record\r\n           const checkIn = manager.create(CheckIn, {\r\n"
                },
                {
                    "date": 1756739919125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n             );\r\n           }\r\n           if (bookingDetail.booking.payment.status !== PaymentStatus.SUCCESS) {\r\n             throw new NotFoundException(\r\n-             ,\r\n+              `Payment for BookingDetail with id ${createCheckInDto.booking_details} is not successful`,\r\n             );\r\n           }\r\n           // Create check-in record\r\n           const checkIn = manager.create(CheckIn, {\r\n"
                },
                {
                    "date": 1756739935601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,13 @@\n           if (!bookingDetail) {\r\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n             );\r\n+            if (bookingDetail.booking.payment.status !== PaymentStatus.SUCCESS) {\r\n+              throw new NotFoundException(\r\n+                `Payment for BookingDetail with id ${createCheckInDto.booking_details} is not successful`,\r\n+              );\r\n+            }\r\n           }\r\n           console.log('Found BookingDetail:', bookingDetail.status);\r\n           if (bookingDetail.status == false) {\r\n             throw new NotFoundException(\r\n@@ -54,13 +59,8 @@\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n             );\r\n           }\r\n-          if (bookingDetail.booking.payment.status !== PaymentStatus.SUCCESS) {\r\n-            throw new NotFoundException(\r\n-              `Payment for BookingDetail with id ${createCheckInDto.booking_details} is not successful`,\r\n-            );\r\n-          }\r\n           // Create check-in record\r\n           const checkIn = manager.create(CheckIn, {\r\n             booking_details: bookingDetail,\r\n           });\r\n"
                },
                {
                    "date": 1756739989306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n           const bookingDetail = await manager.findOne(BookingDetail, {\r\n             where: { id: createCheckInDto.booking_details },\r\n             relations: [\r\n               'check_in',\r\n+              \r\n               'booking',\r\n               'booking.concert',\r\n               'booking.user',\r\n               'booking.user.companies',\r\n@@ -42,14 +43,14 @@\n           if (!bookingDetail) {\r\n             throw new NotFoundException(\r\n               `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n             );\r\n-            if (bookingDetail.booking.payment.status !== PaymentStatus.SUCCESS) {\r\n-              throw new NotFoundException(\r\n-                `Payment for BookingDetail with id ${createCheckInDto.booking_details} is not successful`,\r\n-              );\r\n-            }\r\n           }\r\n+          if (bookingDetail.booking.payment.status !== PaymentStatus.SUCCESS) {\r\n+            throw new NotFoundException(\r\n+              `Payment for BookingDetail with id ${createCheckInDto.booking_details} is not successful`,\r\n+            );\r\n+          }\r\n           console.log('Found BookingDetail:', bookingDetail.status);\r\n           if (bookingDetail.status == false) {\r\n             throw new NotFoundException(\r\n               `You have already been checked in`,\r\n"
                },
                {
                    "date": 1756740000898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n           const bookingDetail = await manager.findOne(BookingDetail, {\r\n             where: { id: createCheckInDto.booking_details },\r\n             relations: [\r\n               'check_in',\r\n-              \r\n+              ''\r\n               'booking',\r\n               'booking.concert',\r\n               'booking.user',\r\n               'booking.user.companies',\r\n"
                },
                {
                    "date": 1756740013632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n           const bookingDetail = await manager.findOne(BookingDetail, {\r\n             where: { id: createCheckInDto.booking_details },\r\n             relations: [\r\n               'check_in',\r\n-              ''\r\n+              'booking.payment',\r\n               'booking',\r\n               'booking.concert',\r\n               'booking.user',\r\n               'booking.user.companies',\r\n"
                },
                {
                    "date": 1756740394543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n               `Payment for BookingDetail with id ${createCheckInDto.booking_details} is not successful`,\r\n             );\r\n           }\r\n           console.log('Found BookingDetail:', bookingDetail.status);\r\n-          if (bookingDetail.status == ) {\r\n+          if (bookingDetail.status == d) {\r\n             throw new NotFoundException(\r\n               `You have already been checked in`,\r\n             );\r\n           }\r\n"
                },
                {
                    "date": 1756740422404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,139 @@\n+import { Inject, Injectable, NotFoundException } from '@nestjs/common';\r\n+import { CreateCheckInDto } from './dto/create-check_in.dto';\r\n+import { UpdateCheckInDto } from './dto/update-check_in.dto';\r\n+import { InjectRepository, InjectDataSource } from '@nestjs/typeorm';\r\n+import { CheckIn } from './entities/check_in.entity';\r\n+import { BookingDetail, DetailsStatus } from '../booking-details/entities/bookingDetails.entity';\r\n+import { DetailsScan } from '../details_scan/entities/details_scan.entity';\r\n+import { Repository, DataSource } from 'typeorm';\r\n+import { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\n+import type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n+import { PaymentStatus } from '../payment/entities/payment.entity';\r\n+@Injectable()\r\n+export class CheckInService {\r\n+  constructor(\r\n+    @InjectDataSource() private readonly dataSource: DataSource,\r\n+    @Inject(TRANSACTION_MANAGER_SERVICE)\r\n+    private readonly transactionManager: ITransactionManager,\r\n+    @InjectRepository(CheckIn)\r\n+    private checkInRepository: Repository<CheckIn>,\r\n+    @InjectRepository(BookingDetail)\r\n+    private bookingDetailRepository: Repository<BookingDetail>,\r\n+    @InjectRepository(DetailsScan)\r\n+    private detailsScanRepository: Repository<DetailsScan>,\r\n+  ) {}\r\n+  async create(createCheckInDto: CreateCheckInDto) {\r\n+    return this.transactionManager.runInTransaction(\r\n+      this.dataSource,\r\n+      async (manager) => {\r\n+        try {\r\n+          // Find booking detail with check-in relation\r\n+          const bookingDetail = await manager.findOne(BookingDetail, {\r\n+            where: { id: createCheckInDto.booking_details },\r\n+            relations: [\r\n+              'check_in',\r\n+              'booking.payment',\r\n+              'booking',\r\n+              'booking.concert',\r\n+              'booking.user',\r\n+              'booking.user.companies',\r\n+            ],\r\n+          });\r\n+\r\n+          if (!bookingDetail) {\r\n+            throw new NotFoundException(\r\n+              `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n+            );\r\n+          }\r\n+          if (bookingDetail.booking.payment.status !== PaymentStatus.SUCCESS) {\r\n+            throw new NotFoundException(\r\n+              `Payment for BookingDetail with id ${createCheckInDto.booking_details} is not successful`,\r\n+            );\r\n+          }\r\n+          console.log('Found BookingDetail:', bookingDetail.status);\r\n+          if (bookingDetail.status === DetailsStatus.NOT_CHECKED_IN) {\r\n+            throw new NotFoundException(\r\n+              `You have already been checked in`,\r\n+            );\r\n+          }\r\n+          if (bookingDetail.check_in) {bookingDetail\r\n+            throw new NotFoundException(\r\n+              `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n+            );\r\n+          }\r\n+          // Create check-in record\r\n+          const checkIn = manager.create(CheckIn, {\r\n+            booking_details: bookingDetail,\r\n+          });\r\n+          const savedCheckIn = await manager.save(CheckIn, checkIn);\r\n+\r\n+          // Update booking detail status\r\n+          bookingDetail.status = true;\r\n+          const savedBookingDetail = await manager.save(BookingDetail, bookingDetail);\r\n+          console.log('Saved BookingDetail:', savedBookingDetail);\r\n+          // Get the company ID\r\n+          const companyId = bookingDetail.booking.user.companies.id;\r\n+\r\n+          // Find existing detail scan for this company\r\n+          let detailsScan = await manager.findOne(DetailsScan, {\r\n+            where: { company: { id: companyId } },\r\n+            relations: ['company'],\r\n+          });\r\n+\r\n+          if (detailsScan) {\r\n+            // Update amount\r\n+            detailsScan.amount += 1;\r\n+\r\n+            // Append new check-in ID to array\r\n+            detailsScan.checkInIds = [\r\n+              ...(detailsScan.checkInIds || []),\r\n+              savedCheckIn.id,\r\n+            ];\r\n+\r\n+            savedCheckIn.detailsScan = detailsScan;\r\n+            await manager.save(CheckIn, savedCheckIn);\r\n+            await manager.save(DetailsScan, detailsScan);\r\n+          } else {\r\n+            // Create new details scan\r\n+            detailsScan = manager.create(DetailsScan, {\r\n+              amount: 1,\r\n+              company: { id: companyId },\r\n+              checkInIds: [savedCheckIn.id], // init with new check-in ID\r\n+            });\r\n+            detailsScan = await manager.save(DetailsScan, detailsScan);\r\n+\r\n+            savedCheckIn.detailsScan = detailsScan;\r\n+            await manager.save(CheckIn, savedCheckIn);\r\n+          }\r\n+          const savedDetailsScan = detailsScan;\r\n+\r\n+          return {\r\n+            message: 'Check-in completed successfully',\r\n+            checkIn: savedCheckIn,\r\n+            bookingDetail: bookingDetail,\r\n+            detailsScan: savedDetailsScan,\r\n+          };\r\n+        } catch (error) {\r\n+          console.error('Error in check-in transaction:', error);\r\n+          throw error; // Transaction will automatically rollback\r\n+        }\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  findAll() {\r\n+    return `This action returns all checkIn`;\r\n+  }\r\n+\r\n+  findOne(id: number) {\r\n+    return `This action returns a #${id} checkIn`;\r\n+  }\r\n+\r\n+  update(id: number, updateCheckInDto: UpdateCheckInDto) {\r\n+    return `This action updates a #${id} checkIn`;\r\n+  }\r\n+\r\n+  remove(id: number) {\r\n+    return `This action removes a #${id} checkIn`;\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1756737111626,
            "name": "Commit-0",
            "content": "import { Inject, Injectable, NotFoundException } from '@nestjs/common';\r\nimport { CreateCheckInDto } from './dto/create-check_in.dto';\r\nimport { UpdateCheckInDto } from './dto/update-check_in.dto';\r\nimport { InjectRepository, InjectDataSource } from '@nestjs/typeorm';\r\nimport { CheckIn } from './entities/check_in.entity';\r\nimport { BookingDetail } from '../booking-details/entities/bookingDetails.entity';\r\nimport { DetailsScan } from '../details_scan/entities/details_scan.entity';\r\nimport { Repository, DataSource } from 'typeorm';\r\nimport { TRANSACTION_MANAGER_SERVICE } from 'src/common/constants/inject-key';\r\nimport type { ITransactionManager } from 'src/common/transaction/transaction.interface';\r\n@Injectable()\r\nexport class CheckInService {\r\n  constructor(\r\n    @InjectDataSource() private readonly dataSource: DataSource,\r\n    @Inject(TRANSACTION_MANAGER_SERVICE)\r\n    private readonly transactionManager: ITransactionManager,\r\n    @InjectRepository(CheckIn)\r\n    private checkInRepository: Repository<CheckIn>,\r\n    @InjectRepository(BookingDetail)\r\n    private bookingDetailRepository: Repository<BookingDetail>,\r\n    @InjectRepository(DetailsScan)\r\n    private detailsScanRepository: Repository<DetailsScan>,\r\n  ) {}\r\n  async create(createCheckInDto: CreateCheckInDto) {\r\n    return this.transactionManager.runInTransaction(\r\n      this.dataSource,\r\n      async (manager) => {\r\n        try {\r\n          // Find booking detail with check-in relation\r\n          const bookingDetail = await manager.findOne(BookingDetail, {\r\n            where: { id: createCheckInDto.booking_details },\r\n            relations: [\r\n              'check_in',\r\n              'booking',\r\n              'booking.concert',\r\n              'booking.user',\r\n              'booking.user.companies',\r\n            ],\r\n          });\r\n\r\n          if (!bookingDetail) {\r\n            throw new NotFoundException(\r\n              `BookingDetail with id ${createCheckInDto.booking_details} not found`,\r\n            );\r\n          }\r\n          if (bookingDetail.status == true) {\r\n            throw new NotFoundException(\r\n              `You have already been checked in`,\r\n            );\r\n          }\r\n          if (bookingDetail.check_in) {\r\n            throw new NotFoundException(\r\n              `BookingDetail with id ${createCheckInDto.booking_details} has already been checked in`,\r\n            );\r\n          }\r\n\r\n          // Create check-in record\r\n          const checkIn = manager.create(CheckIn, {\r\n            booking_details: bookingDetail,\r\n          });\r\n          const savedCheckIn = await manager.save(CheckIn, checkIn);\r\n\r\n          // Update booking detail status\r\n          bookingDetail.status = true;\r\n          await manager.save(BookingDetail, bookingDetail);\r\n\r\n          // Get the company ID\r\n          const companyId = bookingDetail.booking.user.companies.id;\r\n\r\n          // Find existing detail scan for this company\r\n          let detailsScan = await manager.findOne(DetailsScan, {\r\n            where: { company: { id: companyId } },\r\n            relations: ['company'],\r\n          });\r\n\r\n          if (detailsScan) {\r\n            // Update amount\r\n            detailsScan.amount += 1;\r\n\r\n            // Append new check-in ID to array\r\n            detailsScan.checkInIds = [\r\n              ...(detailsScan.checkInIds || []),\r\n              savedCheckIn.id,\r\n            ];\r\n\r\n            savedCheckIn.detailsScan = detailsScan;\r\n            await manager.save(CheckIn, savedCheckIn);\r\n            await manager.save(DetailsScan, detailsScan);\r\n          } else {\r\n            // Create new details scan\r\n            detailsScan = manager.create(DetailsScan, {\r\n              amount: 1,\r\n              company: { id: companyId },\r\n              checkInIds: [savedCheckIn.id], // init with new check-in ID\r\n            });\r\n            detailsScan = await manager.save(DetailsScan, detailsScan);\r\n\r\n            savedCheckIn.detailsScan = detailsScan;\r\n            await manager.save(CheckIn, savedCheckIn);\r\n          }\r\n          const savedDetailsScan = detailsScan;\r\n\r\n          return {\r\n            message: 'Check-in completed successfully',\r\n            checkIn: savedCheckIn,\r\n            bookingDetail: bookingDetail,\r\n            detailsScan: savedDetailsScan,\r\n          };\r\n        } catch (error) {\r\n          console.error('Error in check-in transaction:', error);\r\n          throw error; // Transaction will automatically rollback\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  findAll() {\r\n    return `This action returns all checkIn`;\r\n  }\r\n\r\n  findOne(id: number) {\r\n    return `This action returns a #${id} checkIn`;\r\n  }\r\n\r\n  update(id: number, updateCheckInDto: UpdateCheckInDto) {\r\n    return `This action updates a #${id} checkIn`;\r\n  }\r\n\r\n  remove(id: number) {\r\n    return `This action removes a #${id} checkIn`;\r\n  }\r\n}\r\n"
        }
    ]
}