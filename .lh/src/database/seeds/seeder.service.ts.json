{
    "sourceFile": "src/database/seeds/seeder.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1755925325504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755937933465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,32 @@\n // src/seeder/seeder.service.ts\r\n import { Injectable } from '@nestjs/common';\r\n import { DataSource } from 'typeorm';\r\n import { EnumRole, User } from 'src/modules/users/entities/user.entity';\r\n+import { Company } from 'src/modules/companies/entities/company.entity';\r\n import { bcryptUtil } from 'src/common/utils/bcrypt.util';\r\n \r\n @Injectable()\r\n export class SeederService {\r\n-  constructor(private dataSource: DataSource) {}\r\n-\r\n+  constructor(private dataSource: DataSource) { }\r\n   async seed() {\r\n-    const userRepository = this.dataSource.getRepository(User);\r\n-\r\n-    const adminExists = await userRepository.findOne({ where: { email: 'admin@gmail.com' } });\r\n-    if (!adminExists) {\r\n-      const admin = userRepository.create({\r\n-        username: 'Admin',\r\n+    return this.dataSource.transaction(async (manager) => {\r\n+      const company = manager.create(Company, {\r\n+        name: 'KhaoNiew Co.,Ltd',\r\n+        contact: '1234567890',\r\n+      });\r\n+      await manager.save(company);\r\n+      const user = manager.create(User, {\r\n+        username: 'admin',\r\n+        phone: '02012345678',\r\n         email: 'admin@gmail.com',\r\n-        password: await bcryptUtil.hash('admin@123'),\r\n-        phone: '02088888888',\r\n+        password: await bcryptUtil.hash('password'),\r\n         role: EnumRole.ADMIN,\r\n+        companies: company\r\n       });\r\n-      await userRepository.save(admin);\r\n-      console.log('Admin user created');\r\n-    } else {\r\n-      console.log('Admin already exists');\r\n-    }\r\n-\r\n-    // เพิ่ม seed user ตัวอย่าง\r\n-    // const companyUserExists = await userRepository.findOne({ where: { email: 'test@gmail.com' } });\r\n-    // if (!companyUserExists) {\r\n-    //   const company = userRepository.create({\r\n-    //     username: 'Tester',\r\n-    //     email: 'test@gmail.com',\r\n-    //     password: await bcryptUtil.hash('test@gmail.com'),\r\n-    //     phone: '02088888888',\r\n-    //     role: EnumRole.COMPANY,\r\n-    //   });\r\n-    //   await userRepository.save(company);\r\n-    //   console.log('Company user created');\r\n-    // }\r\n+      await manager.save(user);\r\n+      return {\r\n+        message: 'Database seeded successfully',\r\n+      };\r\n+    })\r\n   }\r\n }\r\n"
                }
            ],
            "date": 1755925325504,
            "name": "Commit-0",
            "content": "// src/seeder/seeder.service.ts\r\nimport { Injectable } from '@nestjs/common';\r\nimport { DataSource } from 'typeorm';\r\nimport { EnumRole, User } from 'src/modules/users/entities/user.entity';\r\nimport { bcryptUtil } from 'src/common/utils/bcrypt.util';\r\n\r\n@Injectable()\r\nexport class SeederService {\r\n  constructor(private dataSource: DataSource) {}\r\n\r\n  async seed() {\r\n    const userRepository = this.dataSource.getRepository(User);\r\n\r\n    const adminExists = await userRepository.findOne({ where: { email: 'admin@gmail.com' } });\r\n    if (!adminExists) {\r\n      const admin = userRepository.create({\r\n        username: 'Admin',\r\n        email: 'admin@gmail.com',\r\n        password: await bcryptUtil.hash('admin@123'),\r\n        phone: '02088888888',\r\n        role: EnumRole.ADMIN,\r\n      });\r\n      await userRepository.save(admin);\r\n      console.log('Admin user created');\r\n    } else {\r\n      console.log('Admin already exists');\r\n    }\r\n\r\n    // เพิ่ม seed user ตัวอย่าง\r\n    // const companyUserExists = await userRepository.findOne({ where: { email: 'test@gmail.com' } });\r\n    // if (!companyUserExists) {\r\n    //   const company = userRepository.create({\r\n    //     username: 'Tester',\r\n    //     email: 'test@gmail.com',\r\n    //     password: await bcryptUtil.hash('test@gmail.com'),\r\n    //     phone: '02088888888',\r\n    //     role: EnumRole.COMPANY,\r\n    //   });\r\n    //   await userRepository.save(company);\r\n    //   console.log('Company user created');\r\n    // }\r\n  }\r\n}\r\n"
        }
    ]
}